{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf610
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Georgia;\f2\fmodern\fcharset0 Courier;
\f3\fnil\fcharset0 Consolas;\f4\fnil\fcharset0 Menlo-Regular;\f5\fswiss\fcharset0 Helvetica-Light;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red10\green92\blue255;\red0\green0\blue0;
\red246\green246\blue239;\red34\green34\blue34;\red157\green101\blue255;\red100\green108\blue125;\red224\green213\blue97;
\red152\green224\blue36;\red214\green214\blue214;\red234\green234\blue234;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c0\c46667\c100000;\cssrgb\c0\c0\c0\c7451;
\cssrgb\c97255\c97255\c94902;\cssrgb\c17647\c17647\c17647;\cssrgb\c68235\c50588\c100000;\cssrgb\c46667\c50196\c56471;\cssrgb\c90196\c85882\c45490;
\cssrgb\c65098\c88627\c18039;\cssrgb\c87059\c87059\c87059;\cssrgb\c93333\c93333\c93333;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}}
\margl1440\margr1440\vieww12220\viewh15520\viewkind0
\deftab720
\pard\pardeftab720\li840\ri840\sl860\sa400\partightenfactor0

\f0\b\fs72 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Nauseating Numbers\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\b0\fs40 \cf2 Time for more problems! As you progress through this set of problems, the difficulty will ramp up. There are no RSpec tests for this exercise, so you'll want to create your own ruby file to code and test your work against the examples provided.\
The solution is available\'a0{\field{\*\fldinst{HYPERLINK "https://aao-alpha.s3-us-west-1.amazonaws.com/assets/topics/advanced_ruby/projects/nauseating_numbers_solution.rb.zip"}}{\fldrslt \cf3 \strokec3 here}}, but please do not look at it until you have attempted all of the problems!\
\pard\pardeftab720\li840\ri840\sl720\sa400\partightenfactor0

\f0\b\fs60 \cf2 Phase 1: No big deal.\
\pard\pardeftab720\li840\ri840\sl560\sa400\partightenfactor0

\fs48 \cf2 strange_sums\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\b0\fs40 \cf2 Write a method\'a0
\f2 \cb4 strange_sums
\f1 \cb1 \'a0that accepts an array of numbers as an argument. The method should return a count of the number of distinct pairs of elements that have a sum of zero. You may assume that the input array contains unique elements.\
Examples\
\pard\pardeftab720\sl480\partightenfactor0

\f3\fs32 \cf5 \cb6 \strokec5 p strange_sums
\f4 ([\cf7 \strokec7 2\cf5 \strokec5 ,
\f3  
\f4 -\cf7 \strokec7 3\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 3\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 4\cf5 \strokec5 ,
\f3  
\f4 -\cf7 \strokec7 2\cf5 \strokec5 ])
\f3      
\f4 \cf8 \strokec8 # 2
\f3 \cf5 \strokec5 \
p strange_sums
\f4 ([\cf7 \strokec7 42\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 3\cf5 \strokec5 ,
\f3  
\f4 -\cf7 \strokec7 1\cf5 \strokec5 ,
\f3  
\f4 -\cf7 \strokec7 42\cf5 \strokec5 ])
\f3       
\f4 \cf8 \strokec8 # 1
\f3 \cf5 \strokec5 \
p strange_sums
\f4 ([-\cf7 \strokec7 5\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 5\cf5 \strokec5 ])
\f3                
\f4 \cf8 \strokec8 # 1
\f3 \cf5 \strokec5 \
p strange_sums
\f4 ([\cf7 \strokec7 19\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 6\cf5 \strokec5 ,
\f3  
\f4 -\cf7 \strokec7 3\cf5 \strokec5 ,
\f3  
\f4 -\cf7 \strokec7 20\cf5 \strokec5 ])
\f3       
\f4 \cf8 \strokec8 # 0
\f3 \cf5 \strokec5 \
p strange_sums
\f4 ([\cf7 \strokec7 9\cf5 \strokec5 ])
\f3                    
\f4 \cf8 \strokec8 # 0
\f3 \cf5 \strokec5 \
\pard\pardeftab720\li840\ri840\sl560\sa400\partightenfactor0

\f0\b\fs48 \cf2 \cb1 \strokec2 \
pair_product\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\b0\fs40 \cf2 Write a method\'a0
\f2 \cb4 pair_product
\f1 \cb1 \'a0that accepts an array of\'a0
\f2 \cb4 numbers
\f1 \cb1 \'a0and a\'a0
\f2 \cb4 product
\f1 \cb1 \'a0as arguments. The method should return a boolean indicating whether or not a pair of distinct elements in the array result in the product when multiplied together. You may assume that the input array contains unique elements.\
Examples\
\pard\pardeftab720\sl480\partightenfactor0

\f3\fs32 \cf5 \cb6 \strokec5 p pair_product
\f4 ([\cf7 \strokec7 4\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 2\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 5\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 8\cf5 \strokec5 ],
\f3  
\f4 \cf7 \strokec7 16\cf5 \strokec5 )
\f3     
\f4 \cf8 \strokec8 # true
\f3 \cf5 \strokec5 \
p pair_product
\f4 ([\cf7 \strokec7 8\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 1\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 9\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 3\cf5 \strokec5 ],
\f3  
\f4 \cf7 \strokec7 8\cf5 \strokec5 )
\f3      
\f4 \cf8 \strokec8 # true
\f3 \cf5 \strokec5 \
p pair_product
\f4 ([\cf7 \strokec7 3\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 4\cf5 \strokec5 ],
\f3  
\f4 \cf7 \strokec7 12\cf5 \strokec5 )
\f3           
\f4 \cf8 \strokec8 # true
\f3 \cf5 \strokec5 \
p pair_product
\f4 ([\cf7 \strokec7 3\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 4\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 6\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 2\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 5\cf5 \strokec5 ],
\f3  
\f4 \cf7 \strokec7 12\cf5 \strokec5 )
\f3  
\f4 \cf8 \strokec8 # true
\f3 \cf5 \strokec5 \
p pair_product
\f4 ([\cf7 \strokec7 4\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 2\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 5\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 7\cf5 \strokec5 ],
\f3  
\f4 \cf7 \strokec7 16\cf5 \strokec5 )
\f3     
\f4 \cf8 \strokec8 # false
\f3 \cf5 \strokec5 \
p pair_product
\f4 ([\cf7 \strokec7 8\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 4\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 9\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 3\cf5 \strokec5 ],
\f3  
\f4 \cf7 \strokec7 8\cf5 \strokec5 )
\f3      
\f4 \cf8 \strokec8 # false
\f3 \cf5 \strokec5 \
p pair_product
\f4 ([\cf7 \strokec7 3\cf5 \strokec5 ],
\f3  
\f4 \cf7 \strokec7 12\cf5 \strokec5 )
\f3              
\f4 \cf8 \strokec8 # false
\f3 \cf5 \strokec5 \
\pard\pardeftab720\li840\ri840\sl560\sa400\partightenfactor0

\f0\b\fs48 \cf2 \cb1 \strokec2 \
rampant_repeats\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\b0\fs40 \cf2 Write a method\'a0
\f2 \cb4 rampant_repeats
\f1 \cb1 \'a0that accepts a string and a hash as arguments. The method should return a new string where characters of the original string are repeated the number of times specified by the hash. If a character does not exist as a key of the hash, then it should remain unchanged.\
Examples\
\pard\pardeftab720\sl480\partightenfactor0

\f3\fs32 \cf5 \cb6 \strokec5 p rampant_repeats
\f4 (\cf9 \strokec9 'taco'\cf5 \strokec5 ,
\f3  
\f4 \{\cf9 \strokec9 'a'\cf5 \strokec5 =>\cf7 \strokec7 3\cf5 \strokec5 ,
\f3  
\f4 \cf9 \strokec9 'c'\cf5 \strokec5 =>\cf7 \strokec7 2\cf5 \strokec5 \})
\f3              
\f4 \cf8 \strokec8 # 'taaacco'
\f3 \cf5 \strokec5 \
p rampant_repeats
\f4 (\cf9 \strokec9 'feverish'\cf5 \strokec5 ,
\f3  
\f4 \{\cf9 \strokec9 'e'\cf5 \strokec5 =>\cf7 \strokec7 2\cf5 \strokec5 ,
\f3  
\f4 \cf9 \strokec9 'f'\cf5 \strokec5 =>\cf7 \strokec7 4\cf5 \strokec5 ,
\f3  
\f4 \cf9 \strokec9 's'\cf5 \strokec5 =>\cf7 \strokec7 3\cf5 \strokec5 \})
\f3  
\f4 \cf8 \strokec8 # 'ffffeeveerisssh'
\f3 \cf5 \strokec5 \
p rampant_repeats
\f4 (\cf9 \strokec9 'misispi'\cf5 \strokec5 ,
\f3  
\f4 \{\cf9 \strokec9 's'\cf5 \strokec5 =>\cf7 \strokec7 2\cf5 \strokec5 ,
\f3  
\f4 \cf9 \strokec9 'p'\cf5 \strokec5 =>\cf7 \strokec7 2\cf5 \strokec5 \})
\f3           
\f4 \cf8 \strokec8 # 'mississppi'
\f3 \cf5 \strokec5 \
p rampant_repeats
\f4 (\cf9 \strokec9 'faarm'\cf5 \strokec5 ,
\f3  
\f4 \{\cf9 \strokec9 'e'\cf5 \strokec5 =>\cf7 \strokec7 3\cf5 \strokec5 ,
\f3  
\f4 \cf9 \strokec9 'a'\cf5 \strokec5 =>\cf7 \strokec7 2\cf5 \strokec5 \})
\f3             
\f4 \cf8 \strokec8 # 'faaaarm'
\f3 \cf5 \strokec5 \
\pard\pardeftab720\li840\ri840\sl560\sa400\partightenfactor0

\f0\b\fs48 \cf2 \cb1 \strokec2 \
perfect_square?\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\b0\fs40 \cf2 Write a method\'a0
\f2 \cb4 perfect_square?
\f1 \cb1 \'a0that accepts a number as an argument. The method should return a boolean indicating whether or not the argument is a perfect square. A perfect square is a number that is the product of some number multiplied by itself. For example, since\'a0
\f2 \cb4 64 = 8 * 8
\f1 \cb1 \'a0and\'a0
\f2 \cb4 144 = 12 * 12
\f1 \cb1 ,\'a0
\f2 \cb4 64
\f1 \cb1 \'a0and\'a0
\f2 \cb4 144
\f1 \cb1 \'a0are perfect squares;\'a0
\f2 \cb4 35
\f1 \cb1 \'a0is not a perfect square.\
Examples\
\pard\pardeftab720\sl480\partightenfactor0

\f3\fs32 \cf5 \cb6 \strokec5 p perfect_square
\f4 (\cf7 \strokec7 1\cf5 \strokec5 )
\f3      
\f4 \cf8 \strokec8 # true
\f3 \cf5 \strokec5 \
p perfect_square
\f4 (\cf7 \strokec7 4\cf5 \strokec5 )
\f3      
\f4 \cf8 \strokec8 # true
\f3 \cf5 \strokec5 \
p perfect_square
\f4 (\cf7 \strokec7 64\cf5 \strokec5 )
\f3     
\f4 \cf8 \strokec8 # true
\f3 \cf5 \strokec5 \
p perfect_square
\f4 (\cf7 \strokec7 100\cf5 \strokec5 )
\f3    
\f4 \cf8 \strokec8 # true
\f3 \cf5 \strokec5 \
p perfect_square
\f4 (\cf7 \strokec7 169\cf5 \strokec5 )
\f3    
\f4 \cf8 \strokec8 # true
\f3 \cf5 \strokec5 \
p perfect_square
\f4 (\cf7 \strokec7 2\cf5 \strokec5 )
\f3      
\f4 \cf8 \strokec8 # false
\f3 \cf5 \strokec5 \
p perfect_square
\f4 (\cf7 \strokec7 40\cf5 \strokec5 )
\f3     
\f4 \cf8 \strokec8 # false
\f3 \cf5 \strokec5 \
p perfect_square
\f4 (\cf7 \strokec7 32\cf5 \strokec5 )
\f3     
\f4 \cf8 \strokec8 # false
\f3 \cf5 \strokec5 \
p perfect_square
\f4 (\cf7 \strokec7 50\cf5 \strokec5 )
\f3     
\f4 \cf8 \strokec8 # false
\f3 \cf5 \strokec5 \
\pard\pardeftab720\li840\ri840\sl720\sa400\partightenfactor0

\f0\b\fs60 \cf2 \cb1 \strokec2 \
Phase 2: Nothing you can't handle.\
\pard\pardeftab720\li840\ri840\sl560\sa400\partightenfactor0

\fs48 \cf2 anti_prime?\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\b0\fs40 \cf2 Write a method\'a0
\f2 \cb4 anti_prime?
\f1 \cb1 \'a0that accepts a number as an argument. The method should return true if the given number has more divisors than all positive numbers less than the given number. For example, 24 is an anti-prime because it has more divisors than any positive number less than 24. Math Fact: Numbers that meet this criteria are also known as\'a0{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Highly_composite_number"}}{\fldrslt \cf3 \strokec3 highly composite numbers}}.\
Examples\
\pard\pardeftab720\sl480\partightenfactor0

\f3\fs32 \cf5 \cb6 \strokec5 p anti_prime
\f4 ?(\cf7 \strokec7 24\cf5 \strokec5 )
\f3    
\f4 \cf8 \strokec8 # true
\f3 \cf5 \strokec5 \
p anti_prime
\f4 ?(\cf7 \strokec7 36\cf5 \strokec5 )
\f3    
\f4 \cf8 \strokec8 # true
\f3 \cf5 \strokec5 \
p anti_prime
\f4 ?(\cf7 \strokec7 48\cf5 \strokec5 )
\f3    
\f4 \cf8 \strokec8 # true
\f3 \cf5 \strokec5 \
p anti_prime
\f4 ?(\cf7 \strokec7 360\cf5 \strokec5 )
\f3   
\f4 \cf8 \strokec8 # true
\f3 \cf5 \strokec5 \
p anti_prime
\f4 ?(\cf7 \strokec7 1260\cf5 \strokec5 )
\f3  
\f4 \cf8 \strokec8 # true
\f3 \cf5 \strokec5 \
p anti_prime
\f4 ?(\cf7 \strokec7 27\cf5 \strokec5 )
\f3    
\f4 \cf8 \strokec8 # false
\f3 \cf5 \strokec5 \
p anti_prime
\f4 ?(\cf7 \strokec7 5\cf5 \strokec5 )
\f3     
\f4 \cf8 \strokec8 # false
\f3 \cf5 \strokec5 \
p anti_prime
\f4 ?(\cf7 \strokec7 100\cf5 \strokec5 )
\f3   
\f4 \cf8 \strokec8 # false
\f3 \cf5 \strokec5 \
p anti_prime
\f4 ?(\cf7 \strokec7 136\cf5 \strokec5 )
\f3   
\f4 \cf8 \strokec8 # false
\f3 \cf5 \strokec5 \
p anti_prime
\f4 ?(\cf7 \strokec7 1024\cf5 \strokec5 )
\f3  
\f4 \cf8 \strokec8 # false
\f3 \cf5 \strokec5 \
\pard\pardeftab720\li840\ri840\sl560\sa400\partightenfactor0

\f0\b\fs48 \cf2 \cb1 \strokec2 \
matrix_addition\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\b0\fs40 \cf2 Let a 2-dimensional array be known as a "matrix". Write a method\'a0
\f2 \cb4 matrix_addition
\f1 \cb1 \'a0that accepts two matrices as arguments. The two matrices are guaranteed to have the same "height" and "width". The method should return a new matrix representing the sum of the two arguments. To add matrices, we simply add the values at the same positions:\
\pard\pardeftab720\sl480\partightenfactor0

\f3\fs32 \cf5 \cb6 \strokec5 # programmatically\
[[2, 5], [4, 7]] + [[9, 1], [3, 0]] => [[11, 6], [7, 7]]\
\
# structurally\
2 5  +  9 1  =>  11 6\
4 7     3 0      7 7\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\fs40 \cf2 \cb1 \strokec2 Examples\
\pard\pardeftab720\sl480\partightenfactor0

\f3\fs32 \cf5 \cb6 \strokec5 matrix_a 
\f4 =
\f3  
\f4 [[\cf7 \strokec7 2\cf5 \strokec5 ,\cf7 \strokec7 5\cf5 \strokec5 ],
\f3  
\f4 [\cf7 \strokec7 4\cf5 \strokec5 ,\cf7 \strokec7 7\cf5 \strokec5 ]]
\f3 \
matrix_b 
\f4 =
\f3  
\f4 [[\cf7 \strokec7 9\cf5 \strokec5 ,\cf7 \strokec7 1\cf5 \strokec5 ],
\f3  
\f4 [\cf7 \strokec7 3\cf5 \strokec5 ,\cf7 \strokec7 0\cf5 \strokec5 ]]
\f3 \
matrix_c 
\f4 =
\f3  
\f4 [[-\cf7 \strokec7 1\cf5 \strokec5 ,\cf7 \strokec7 0\cf5 \strokec5 ],
\f3  
\f4 [\cf7 \strokec7 0\cf5 \strokec5 ,-\cf7 \strokec7 1\cf5 \strokec5 ]]
\f3 \
matrix_d 
\f4 =
\f3  
\f4 [[\cf7 \strokec7 2\cf5 \strokec5 ,
\f3  
\f4 -\cf7 \strokec7 5\cf5 \strokec5 ],
\f3  
\f4 [\cf7 \strokec7 7\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 10\cf5 \strokec5 ],
\f3  
\f4 [\cf7 \strokec7 0\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 1\cf5 \strokec5 ]]
\f3 \
matrix_e 
\f4 =
\f3  
\f4 [[\cf7 \strokec7 0
\f3 \cf5 \strokec5  
\f4 ,
\f3  
\f4 \cf7 \strokec7 0\cf5 \strokec5 ],
\f3  
\f4 [\cf7 \strokec7 12\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 4\cf5 \strokec5 ],
\f3  
\f4 [\cf7 \strokec7 6\cf5 \strokec5 ,
\f3   
\f4 \cf7 \strokec7 3\cf5 \strokec5 ]]
\f3 \
\
p matrix_addition
\f4 (
\f3 matrix_a
\f4 ,
\f3  matrix_b
\f4 )
\f3  
\f4 \cf8 \strokec8 # [[11, 6], [7, 7]]
\f3 \cf5 \strokec5 \
p matrix_addition
\f4 (
\f3 matrix_a
\f4 ,
\f3  matrix_c
\f4 )
\f3  
\f4 \cf8 \strokec8 # [[1, 5], [4, 6]]
\f3 \cf5 \strokec5 \
p matrix_addition
\f4 (
\f3 matrix_b
\f4 ,
\f3  matrix_c
\f4 )
\f3  
\f4 \cf8 \strokec8 # [[8, 1], [3, -1]]
\f3 \cf5 \strokec5 \
p matrix_addition
\f4 (
\f3 matrix_d
\f4 ,
\f3  matrix_e
\f4 )
\f3  
\f4 \cf8 \strokec8 # [[2, -5], [19, 14], [6, 4]]
\f3 \cf5 \strokec5 \
\pard\pardeftab720\li840\ri840\sl560\sa400\partightenfactor0

\f0\b\fs48 \cf2 \cb1 \strokec2 \
mutual_factors\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\b0\fs40 \cf2 Write a method\'a0
\f2 \cb4 mutual_factors
\f1 \cb1 \'a0that accepts any amount of numbers as arguments. The method should return an array containing all of the common divisors shared among the arguments. For example, the common divisors of 50 and 30 are\'a0{\field{\*\fldinst{HYPERLINK "https://open.appacademy.io/learn/full-stack-online/software-engineering-foundations/nauseating-numbers"}}{\fldrslt \cf3 \strokec3 1, 2, 5, 10}}. You can assume that all of the arguments are positive integers.\
Examples\
\pard\pardeftab720\sl480\partightenfactor0

\f3\fs32 \cf5 \cb6 \strokec5 p mutual_factors
\f4 (\cf7 \strokec7 50\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 30\cf5 \strokec5 )
\f3             
\f4 \cf8 \strokec8 # [1, 2, 5, 10]
\f3 \cf5 \strokec5 \
p mutual_factors
\f4 (\cf7 \strokec7 50\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 30\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 45\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 105\cf5 \strokec5 )
\f3    
\f4 \cf8 \strokec8 # [1, 5]
\f3 \cf5 \strokec5 \
p mutual_factors
\f4 (\cf7 \strokec7 8\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 4\cf5 \strokec5 )
\f3               
\f4 \cf8 \strokec8 # [1, 2, 4]
\f3 \cf5 \strokec5 \
p mutual_factors
\f4 (\cf7 \strokec7 8\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 4\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 10\cf5 \strokec5 )
\f3           
\f4 \cf8 \strokec8 # [1, 2]
\f3 \cf5 \strokec5 \
p mutual_factors
\f4 (\cf7 \strokec7 12\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 24\cf5 \strokec5 )
\f3             
\f4 \cf8 \strokec8 # [1, 2, 3, 4, 6, 12]
\f3 \cf5 \strokec5 \
p mutual_factors
\f4 (\cf7 \strokec7 12\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 24\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 64\cf5 \strokec5 )
\f3         
\f4 \cf8 \strokec8 # [1, 2, 4]
\f3 \cf5 \strokec5 \
p mutual_factors
\f4 (\cf7 \strokec7 22\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 44\cf5 \strokec5 )
\f3             
\f4 \cf8 \strokec8 # [1, 2, 11, 22]
\f3 \cf5 \strokec5 \
p mutual_factors
\f4 (\cf7 \strokec7 22\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 44\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 11\cf5 \strokec5 )
\f3         
\f4 \cf8 \strokec8 # [1, 11]
\f3 \cf5 \strokec5 \
p mutual_factors
\f4 (\cf7 \strokec7 7\cf5 \strokec5 )
\f3                  
\f4 \cf8 \strokec8 # [1, 7]
\f3 \cf5 \strokec5 \
p mutual_factors
\f4 (\cf7 \strokec7 7\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 9\cf5 \strokec5 )
\f3               
\f4 \cf8 \strokec8 # [1]
\f3 \cf5 \strokec5 \
\pard\pardeftab720\li840\ri840\sl560\sa400\partightenfactor0

\f0\b\fs48 \cf2 \cb1 \strokec2 \
tribonacci_number\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\b0\fs40 \cf2 The tribonacci sequence is similar to that of\'a0{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Fibonacci_number"}}{\fldrslt \cf3 \strokec3 Fibonacci}}. The first three numbers of the tribonacci sequence are 1, 1, and 2. To generate the next number of the sequence, we take the sum of the previous three numbers. The first six numbers of tribonacci sequence are:\
\pard\pardeftab720\sl480\partightenfactor0

\f3\fs32 \cf5 \cb6 \strokec5 1, 1, 2, 4, 7, 13, ... and so on\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\fs40 \cf2 \cb1 \strokec2 Write a method\'a0
\f2 \cb4 tribonacci_number
\f1 \cb1 \'a0that accepts a number argument, n, and returns the n-th number of the tribonacci sequence.\
Examples\
\pard\pardeftab720\sl480\partightenfactor0

\f3\fs32 \cf5 \cb6 \strokec5 p tribonacci_number
\f4 (\cf7 \strokec7 1\cf5 \strokec5 )
\f3   
\f4 \cf8 \strokec8 # 1
\f3 \cf5 \strokec5 \
p tribonacci_number
\f4 (\cf7 \strokec7 2\cf5 \strokec5 )
\f3   
\f4 \cf8 \strokec8 # 1
\f3 \cf5 \strokec5 \
p tribonacci_number
\f4 (\cf7 \strokec7 3\cf5 \strokec5 )
\f3   
\f4 \cf8 \strokec8 # 2
\f3 \cf5 \strokec5 \
p tribonacci_number
\f4 (\cf7 \strokec7 4\cf5 \strokec5 )
\f3   
\f4 \cf8 \strokec8 # 4
\f3 \cf5 \strokec5 \
p tribonacci_number
\f4 (\cf7 \strokec7 5\cf5 \strokec5 )
\f3   
\f4 \cf8 \strokec8 # 7
\f3 \cf5 \strokec5 \
p tribonacci_number
\f4 (\cf7 \strokec7 6\cf5 \strokec5 )
\f3   
\f4 \cf8 \strokec8 # 13
\f3 \cf5 \strokec5 \
p tribonacci_number
\f4 (\cf7 \strokec7 7\cf5 \strokec5 )
\f3   
\f4 \cf8 \strokec8 # 24
\f3 \cf5 \strokec5 \
p tribonacci_number
\f4 (\cf7 \strokec7 11\cf5 \strokec5 )
\f3  
\f4 \cf8 \strokec8 # 274
\f3 \cf5 \strokec5 \
\pard\pardeftab720\li840\ri840\sl720\sa400\partightenfactor0

\f0\b\fs60 \cf2 \cb1 \strokec2 \
Phase 3: Now we're having fun.\
\pard\pardeftab720\li840\ri840\sl560\sa400\partightenfactor0

\fs48 \cf2 matrix_addition_reloaded\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\b0\fs40 \cf2 Write a method\'a0
\f2 \cb4 matrix_addition_reloaded
\f1 \cb1 \'a0that accepts any number of matrices as arguments. The method should return a new matrix representing the sum of the arguments. Matrix addition can only be performed on matrices of similar dimensions, so if all of the given matrices do not have the same "height" and "width", then return\'a0
\f2 \cb4 nil
\f1 \cb1 .\
Examples\
\pard\pardeftab720\sl480\partightenfactor0

\f3\fs32 \cf5 \cb6 \strokec5 matrix_a 
\f4 =
\f3  
\f4 [[\cf7 \strokec7 2\cf5 \strokec5 ,\cf7 \strokec7 5\cf5 \strokec5 ],
\f3  
\f4 [\cf7 \strokec7 4\cf5 \strokec5 ,\cf7 \strokec7 7\cf5 \strokec5 ]]
\f3 \
matrix_b 
\f4 =
\f3  
\f4 [[\cf7 \strokec7 9\cf5 \strokec5 ,\cf7 \strokec7 1\cf5 \strokec5 ],
\f3  
\f4 [\cf7 \strokec7 3\cf5 \strokec5 ,\cf7 \strokec7 0\cf5 \strokec5 ]]
\f3 \
matrix_c 
\f4 =
\f3  
\f4 [[-\cf7 \strokec7 1\cf5 \strokec5 ,\cf7 \strokec7 0\cf5 \strokec5 ],
\f3  
\f4 [\cf7 \strokec7 0\cf5 \strokec5 ,-\cf7 \strokec7 1\cf5 \strokec5 ]]
\f3 \
matrix_d 
\f4 =
\f3  
\f4 [[\cf7 \strokec7 2\cf5 \strokec5 ,
\f3  
\f4 -\cf7 \strokec7 5\cf5 \strokec5 ],
\f3  
\f4 [\cf7 \strokec7 7\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 10\cf5 \strokec5 ],
\f3  
\f4 [\cf7 \strokec7 0\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 1\cf5 \strokec5 ]]
\f3 \
matrix_e 
\f4 =
\f3  
\f4 [[\cf7 \strokec7 0
\f3 \cf5 \strokec5  
\f4 ,
\f3  
\f4 \cf7 \strokec7 0\cf5 \strokec5 ],
\f3  
\f4 [\cf7 \strokec7 12\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 4\cf5 \strokec5 ],
\f3  
\f4 [\cf7 \strokec7 6\cf5 \strokec5 ,
\f3   
\f4 \cf7 \strokec7 3\cf5 \strokec5 ]]
\f3 \
\
p matrix_addition_reloaded
\f4 (
\f3 matrix_a
\f4 ,
\f3  matrix_b
\f4 )
\f3               
\f4 \cf8 \strokec8 # [[11, 6], [7, 7]]
\f3 \cf5 \strokec5 \
p matrix_addition_reloaded
\f4 (
\f3 matrix_a
\f4 ,
\f3  matrix_b
\f4 ,
\f3  matrix_c
\f4 )
\f3     
\f4 \cf8 \strokec8 # [[10, 6], [7, 6]]
\f3 \cf5 \strokec5 \
p matrix_addition_reloaded
\f4 (
\f3 matrix_e
\f4 )
\f3                         
\f4 \cf8 \strokec8 # [[0, 0], [12, 4], [6, 3]]
\f3 \cf5 \strokec5 \
p matrix_addition_reloaded
\f4 (
\f3 matrix_d
\f4 ,
\f3  matrix_e
\f4 )
\f3               
\f4 \cf8 \strokec8 # [[2, -5], [19, 14], [6, 4]]
\f3 \cf5 \strokec5 \
p matrix_addition_reloaded
\f4 (
\f3 matrix_a
\f4 ,
\f3  matrix_b
\f4 ,
\f3  matrix_e
\f4 )
\f3     
\f4 \cf8 \strokec8 # nil
\f3 \cf5 \strokec5 \
p matrix_addition_reloaded
\f4 (
\f3 matrix_d
\f4 ,
\f3  matrix_e
\f4 ,
\f3  matrix_c
\f4 )
\f3     
\f4 \cf8 \strokec8 # nil
\f3 \cf5 \strokec5 \
\pard\pardeftab720\li840\ri840\sl560\sa400\partightenfactor0

\f0\b\fs48 \cf2 \cb1 \strokec2 \
squarocol?\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\b0\fs40 \cf2 Write a method\'a0
\f2 \cb4 squarocol?
\f1 \cb1 \'a0that accepts a 2-dimensional array as an argument. The method should return a boolean indicating whether or not any row or column is completely filled with the same element. You may assume that the 2-dimensional array has "square" dimensions, meaning it's height is the same as it's width.\
Examples\
\pard\pardeftab720\sl480\partightenfactor0

\f3\fs32 \cf5 \cb6 \strokec5 p squarocol
\f4 ?([
\f3 \
    
\f4 [\cf10 \strokec10 :a\cf5 \strokec5 ,
\f3  
\f4 \cf10 \strokec10 :x
\f3 \cf5 \strokec5  
\f4 ,
\f3  
\f4 \cf10 \strokec10 :d\cf5 \strokec5 ],
\f3 \
    
\f4 [\cf10 \strokec10 :b\cf5 \strokec5 ,
\f3  
\f4 \cf10 \strokec10 :x
\f3 \cf5 \strokec5  
\f4 ,
\f3  
\f4 \cf10 \strokec10 :e\cf5 \strokec5 ],
\f3 \
    
\f4 [\cf10 \strokec10 :c\cf5 \strokec5 ,
\f3  
\f4 \cf10 \strokec10 :x
\f3 \cf5 \strokec5  
\f4 ,
\f3  
\f4 \cf10 \strokec10 :f\cf5 \strokec5 ],
\f3 \
\pard\pardeftab720\sl480\partightenfactor0

\f4 \cf5 ])
\f3  
\f4 \cf8 \strokec8 # true
\f3 \cf5 \strokec5 \
\
p squarocol
\f4 ?([
\f3 \
    
\f4 [\cf10 \strokec10 :x\cf5 \strokec5 ,
\f3  
\f4 \cf10 \strokec10 :y\cf5 \strokec5 ,
\f3  
\f4 \cf10 \strokec10 :x\cf5 \strokec5 ],
\f3 \
    
\f4 [\cf10 \strokec10 :x\cf5 \strokec5 ,
\f3  
\f4 \cf10 \strokec10 :z\cf5 \strokec5 ,
\f3  
\f4 \cf10 \strokec10 :x\cf5 \strokec5 ],
\f3 \
    
\f4 [\cf10 \strokec10 :o\cf5 \strokec5 ,
\f3  
\f4 \cf10 \strokec10 :o\cf5 \strokec5 ,
\f3  
\f4 \cf10 \strokec10 :o\cf5 \strokec5 ],
\f3 \

\f4 ])
\f3  
\f4 \cf8 \strokec8 # true
\f3 \cf5 \strokec5 \
\
p squarocol
\f4 ?([
\f3 \
    
\f4 [\cf10 \strokec10 :o\cf5 \strokec5 ,
\f3  
\f4 \cf10 \strokec10 :x
\f3 \cf5 \strokec5  
\f4 ,
\f3  
\f4 \cf10 \strokec10 :o\cf5 \strokec5 ],
\f3 \
    
\f4 [\cf10 \strokec10 :x\cf5 \strokec5 ,
\f3  
\f4 \cf10 \strokec10 :o
\f3 \cf5 \strokec5  
\f4 ,
\f3  
\f4 \cf10 \strokec10 :x\cf5 \strokec5 ],
\f3 \
    
\f4 [\cf10 \strokec10 :o\cf5 \strokec5 ,
\f3  
\f4 \cf10 \strokec10 :x
\f3 \cf5 \strokec5  
\f4 ,
\f3  
\f4 \cf10 \strokec10 :o\cf5 \strokec5 ],
\f3 \

\f4 ])
\f3  
\f4 \cf8 \strokec8 # false
\f3 \cf5 \strokec5 \
\
p squarocol
\f4 ?([
\f3 \
    
\f4 [\cf7 \strokec7 1\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 2\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 2\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 7\cf5 \strokec5 ],
\f3 \
    
\f4 [\cf7 \strokec7 1\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 6\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 6\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 7\cf5 \strokec5 ],
\f3 \
    
\f4 [\cf7 \strokec7 0\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 5\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 2\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 7\cf5 \strokec5 ],
\f3 \
    
\f4 [\cf7 \strokec7 4\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 2\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 9\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 7\cf5 \strokec5 ],
\f3 \

\f4 ])
\f3  
\f4 \cf8 \strokec8 # true
\f3 \cf5 \strokec5 \
\
p squarocol
\f4 ?([
\f3 \
    
\f4 [\cf7 \strokec7 1\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 2\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 2\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 7\cf5 \strokec5 ],
\f3 \
    
\f4 [\cf7 \strokec7 1\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 6\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 6\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 0\cf5 \strokec5 ],
\f3 \
    
\f4 [\cf7 \strokec7 0\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 5\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 2\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 7\cf5 \strokec5 ],
\f3 \
    
\f4 [\cf7 \strokec7 4\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 2\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 9\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 7\cf5 \strokec5 ],
\f3 \

\f4 ])
\f3  
\f4 \cf8 \strokec8 # false
\f3 \cf5 \strokec5 \
\pard\pardeftab720\li840\ri840\sl560\sa400\partightenfactor0

\f0\b\fs48 \cf2 \cb1 \strokec2 \
squaragonal?\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\b0\fs40 \cf2 Write a method\'a0
\f2 \cb4 squaragonal?
\f1 \cb1 \'a0that accepts 2-dimensional array as an argument. The method should return a boolean indicating whether or not the array contains all of the same element across either of its diagonals. You may assume that the 2-dimensional array has "square" dimensions, meaning it's height is the same as it's width.\
Examples\
\pard\pardeftab720\sl480\partightenfactor0

\f3\fs32 \cf5 \cb6 \strokec5 p squaragonal
\f4 ?([
\f3 \
    
\f4 [\cf10 \strokec10 :x\cf5 \strokec5 ,
\f3  
\f4 \cf10 \strokec10 :y\cf5 \strokec5 ,
\f3  
\f4 \cf10 \strokec10 :o\cf5 \strokec5 ],
\f3 \
    
\f4 [\cf10 \strokec10 :x\cf5 \strokec5 ,
\f3  
\f4 \cf10 \strokec10 :x\cf5 \strokec5 ,
\f3  
\f4 \cf10 \strokec10 :x\cf5 \strokec5 ],
\f3 \
    
\f4 [\cf10 \strokec10 :o\cf5 \strokec5 ,
\f3  
\f4 \cf10 \strokec10 :o\cf5 \strokec5 ,
\f3  
\f4 \cf10 \strokec10 :x\cf5 \strokec5 ],
\f3 \
\pard\pardeftab720\sl480\partightenfactor0

\f4 \cf5 ])
\f3  
\f4 \cf8 \strokec8 # true
\f3 \cf5 \strokec5 \
\
p squaragonal
\f4 ?([
\f3 \
    
\f4 [\cf10 \strokec10 :x\cf5 \strokec5 ,
\f3  
\f4 \cf10 \strokec10 :y\cf5 \strokec5 ,
\f3  
\f4 \cf10 \strokec10 :o\cf5 \strokec5 ],
\f3 \
    
\f4 [\cf10 \strokec10 :x\cf5 \strokec5 ,
\f3  
\f4 \cf10 \strokec10 :o\cf5 \strokec5 ,
\f3  
\f4 \cf10 \strokec10 :x\cf5 \strokec5 ],
\f3 \
    
\f4 [\cf10 \strokec10 :o\cf5 \strokec5 ,
\f3  
\f4 \cf10 \strokec10 :o\cf5 \strokec5 ,
\f3  
\f4 \cf10 \strokec10 :x\cf5 \strokec5 ],
\f3 \

\f4 ])
\f3  
\f4 \cf8 \strokec8 # true
\f3 \cf5 \strokec5 \
\
p squaragonal
\f4 ?([
\f3 \
    
\f4 [\cf7 \strokec7 1\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 2\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 2\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 7\cf5 \strokec5 ],
\f3 \
    
\f4 [\cf7 \strokec7 1\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 1\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 6\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 7\cf5 \strokec5 ],
\f3 \
    
\f4 [\cf7 \strokec7 0\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 5\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 1\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 7\cf5 \strokec5 ],
\f3 \
    
\f4 [\cf7 \strokec7 4\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 2\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 9\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 1\cf5 \strokec5 ],
\f3 \

\f4 ])
\f3  
\f4 \cf8 \strokec8 # true
\f3 \cf5 \strokec5 \
\
p squaragonal
\f4 ?([
\f3 \
    
\f4 [\cf7 \strokec7 1\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 2\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 2\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 5\cf5 \strokec5 ],
\f3 \
    
\f4 [\cf7 \strokec7 1\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 6\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 5\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 0\cf5 \strokec5 ],
\f3 \
    
\f4 [\cf7 \strokec7 0\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 2\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 2\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 7\cf5 \strokec5 ],
\f3 \
    
\f4 [\cf7 \strokec7 5\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 2\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 9\cf5 \strokec5 ,
\f3  
\f4 \cf7 \strokec7 7\cf5 \strokec5 ],
\f3 \

\f4 ])
\f3  
\f4 \cf8 \strokec8 # false
\f3 \cf5 \strokec5 \
\pard\pardeftab720\li840\ri840\sl560\sa400\partightenfactor0

\f0\b\fs48 \cf2 \cb1 \strokec2 \
pascals_triangle\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Pascal%27s_triangle"}}{\fldrslt 
\f1\b0\fs40 \cf3 \strokec3 Pascal's triangle}}
\f1\b0\fs40 \'a0is a 2-dimensional array with the shape of a pyramid. The top of the pyramid is the number 1. To generate further levels of the pyramid, every element is the sum of the element above and to the left with the element above and to the right. Nonexisting elements are treated as 0 when calculating the sum. For example, here are the first 5 levels of Pascal's triangle:\
\pard\pardeftab720\sl480\partightenfactor0

\f3\fs32 \cf5 \cb6 \strokec5       1\
     1 1\
    1 2 1\
   1 3 3 1\
  1 4 6 4 1\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\fs40 \cf2 \cb1 \strokec2 Write a method\'a0
\f2 \cb4 pascals_triangle
\f1 \cb1 \'a0that accepts a positive number, n, as an argument and returns a 2-dimensional array representing the first n levels of pascal's triangle.\
Examples\
\pard\pardeftab720\sl480\partightenfactor0

\f3\fs32 \cf5 \cb6 \strokec5 p pascals_triangle
\f4 (\cf7 \strokec7 5\cf5 \strokec5 )
\f3 \
\pard\pardeftab720\sl480\partightenfactor0

\f4 \cf8 \strokec8 # [
\f3 \cf5 \strokec5 \

\f4 \cf8 \strokec8 #     [1],
\f3 \cf5 \strokec5 \

\f4 \cf8 \strokec8 #     [1, 1],
\f3 \cf5 \strokec5 \

\f4 \cf8 \strokec8 #     [1, 2, 1],
\f3 \cf5 \strokec5 \

\f4 \cf8 \strokec8 #     [1, 3, 3, 1],
\f3 \cf5 \strokec5 \

\f4 \cf8 \strokec8 #     [1, 4, 6, 4, 1]
\f3 \cf5 \strokec5 \

\f4 \cf8 \strokec8 # ]
\f3 \cf5 \strokec5 \
\
p pascals_triangle
\f4 (\cf7 \strokec7 7\cf5 \strokec5 )
\f3 \

\f4 \cf8 \strokec8 # [
\f3 \cf5 \strokec5 \

\f4 \cf8 \strokec8 #     [1],
\f3 \cf5 \strokec5 \

\f4 \cf8 \strokec8 #     [1, 1],
\f3 \cf5 \strokec5 \

\f4 \cf8 \strokec8 #     [1, 2, 1],
\f3 \cf5 \strokec5 \

\f4 \cf8 \strokec8 #     [1, 3, 3, 1],
\f3 \cf5 \strokec5 \

\f4 \cf8 \strokec8 #     [1, 4, 6, 4, 1],
\f3 \cf5 \strokec5 \

\f4 \cf8 \strokec8 #     [1, 5, 10, 10, 5, 1],
\f3 \cf5 \strokec5 \

\f4 \cf8 \strokec8 #     [1, 6, 15, 20, 15, 6, 1]
\f3 \cf5 \strokec5 \

\f4 \cf8 \strokec8 # ]
\f3 \cf5 \strokec5 \
\pard\pardeftab720\li840\ri840\sl720\sa400\partightenfactor0

\f0\b\fs60 \cf2 \cb1 \strokec2 Phase 4: Nauseating.\
\pard\pardeftab720\li840\ri840\sl560\sa400\partightenfactor0

\fs48 \cf2 mersenne_prime\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\b0\fs40 \cf2 A "Mersenne prime" is a prime number that is one less than a power of 2. This means that it is a prime number with the form\'a0
\f2 \cb4 2^x - 1
\f1 \cb1 , where\'a0
\f2 \cb4 x
\f1 \cb1 \'a0is some exponent. For example:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl680\sa100\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 3 is a Mersenne prime because it is prime and\'a0
\f2 \cb4 3 = 2^2 - 1
\f1 \cb1 \
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 7 is a Mersenne prime because it is prime and\'a0
\f2 \cb4 7 = 2^3 - 1
\f1 \cb1 \
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 11 is\'a0
\i not
\i0 \'a0a Mersenne prime because although it is prime, it does not have the form\'a0
\f2 \cb4 2^x - 1
\f1 \cb1 \
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0
\cf2 The first three Mersenne primes are 3, 7, and 31. Write a method\'a0
\f2 \cb4 mersenne_prime
\f1 \cb1 \'a0that accepts a number, n, as an argument and returns the n-th Mersenne prime.\
Examples\
\pard\pardeftab720\sl480\partightenfactor0

\f3\fs32 \cf5 \cb6 \strokec5 p mersenne_prime
\f4 (\cf7 \strokec7 1\cf5 \strokec5 )
\f3  
\f4 \cf8 \strokec8 # 3
\f3 \cf5 \strokec5 \
p mersenne_prime
\f4 (\cf7 \strokec7 2\cf5 \strokec5 )
\f3  
\f4 \cf8 \strokec8 # 7
\f3 \cf5 \strokec5 \
p mersenne_prime
\f4 (\cf7 \strokec7 3\cf5 \strokec5 )
\f3  
\f4 \cf8 \strokec8 # 31
\f3 \cf5 \strokec5 \
p mersenne_prime
\f4 (\cf7 \strokec7 4\cf5 \strokec5 )
\f3  
\f4 \cf8 \strokec8 # 127
\f3 \cf5 \strokec5 \
p mersenne_prime
\f4 (\cf7 \strokec7 6\cf5 \strokec5 )
\f3  
\f4 \cf8 \strokec8 # 131071
\f3 \cf5 \strokec5 \
\pard\pardeftab720\li840\ri840\sl560\sa400\partightenfactor0

\f0\b\fs48 \cf2 \cb1 \strokec2 \
triangular_word?\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\b0\fs40 \cf2 A\'a0{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Triangular_number"}}{\fldrslt \cf3 \strokec3 triangular number}}\'a0is a number of the form\'a0
\f2 \cb4 (i * (i + 1)) / 2
\f1 \cb1 \'a0where\'a0
\f2 \cb4 i
\f1 \cb1 \'a0is some positive integer. Substituting\'a0
\f2 \cb4 i
\f1 \cb1 \'a0with increasing integers gives the triangular number sequence. The first five numbers of the triangular number sequence are 1, 3, 6, 10, 15. Below is a breakdown of the calculations used to obtain these numbers:\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trmaxw14000 \tamart400 \trmarl850 \tamarb400 \trmarr850 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth3152\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf11 \clbrdrl\brdrs\brdrw20\brdrcf11 \clbrdrb\brdrs\brdrw20\brdrcf11 \clbrdrr\brdrs\brdrw20\brdrcf11 \clpadt120 \clpadl260 \clpadb120 \clpadr260 \gaph\cellx4320
\clvertalt\clvertalbase \clshdrawnil \clwWidth9727\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf11 \clbrdrl\brdrs\brdrw20\brdrcf11 \clbrdrb\brdrs\brdrw20\brdrcf11 \clbrdrr\brdrs\brdrw20\brdrcf11 \clpadt120 \clpadl260 \clpadb120 \clpadr260 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl340\qc\partightenfactor0

\f0\b\fs21 \cf2 i\cell 
\pard\intbl\itap1\pardeftab720\sl340\qc\partightenfactor0
\cf2 (i\'a0*\'a0(i + 1)) / 2\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trmaxw14000 \tamart400 \trmarl850 \tamarb400 \trmarr850 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth3152\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf11 \clbrdrl\brdrs\brdrw20\brdrcf11 \clbrdrb\brdrs\brdrw20\brdrcf11 \clbrdrr\brdrs\brdrw20\brdrcf11 \clpadt120 \clpadl260 \clpadb120 \clpadr260 \gaph\cellx4320
\clvertalt\clvertalbase \clshdrawnil \clwWidth9727\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf11 \clbrdrl\brdrs\brdrw20\brdrcf11 \clbrdrb\brdrs\brdrw20\brdrcf11 \clbrdrr\brdrs\brdrw20\brdrcf11 \clpadt120 \clpadl260 \clpadb120 \clpadr260 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl340\partightenfactor0

\f5\b0 \cf2 1\cell 
\pard\intbl\itap1\pardeftab720\sl340\partightenfactor0
\cf2 1\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trmaxw14000 \tamart400 \trmarl850 \tamarb400 \trmarr850 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clcbpat12 \clwWidth3152\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf11 \clbrdrl\brdrs\brdrw20\brdrcf11 \clbrdrb\brdrs\brdrw20\brdrcf11 \clbrdrr\brdrs\brdrw20\brdrcf11 \clpadt120 \clpadl260 \clpadb120 \clpadr260 \gaph\cellx4320
\clvertalt\clvertalbase \clcbpat12 \clwWidth9727\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf11 \clbrdrl\brdrs\brdrw20\brdrcf11 \clbrdrb\brdrs\brdrw20\brdrcf11 \clbrdrr\brdrs\brdrw20\brdrcf11 \clpadt120 \clpadl260 \clpadb120 \clpadr260 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl340\partightenfactor0
\cf2 2\cell 
\pard\intbl\itap1\pardeftab720\sl340\partightenfactor0
\cf2 3\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trmaxw14000 \tamart400 \trmarl850 \tamarb400 \trmarr850 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth3152\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf11 \clbrdrl\brdrs\brdrw20\brdrcf11 \clbrdrb\brdrs\brdrw20\brdrcf11 \clbrdrr\brdrs\brdrw20\brdrcf11 \clpadt120 \clpadl260 \clpadb120 \clpadr260 \gaph\cellx4320
\clvertalt\clvertalbase \clshdrawnil \clwWidth9727\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf11 \clbrdrl\brdrs\brdrw20\brdrcf11 \clbrdrb\brdrs\brdrw20\brdrcf11 \clbrdrr\brdrs\brdrw20\brdrcf11 \clpadt120 \clpadl260 \clpadb120 \clpadr260 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl340\partightenfactor0
\cf2 3\cell 
\pard\intbl\itap1\pardeftab720\sl340\partightenfactor0
\cf2 6\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trmaxw14000 \tamart400 \trmarl850 \tamarb400 \trmarr850 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clcbpat12 \clwWidth3152\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf11 \clbrdrl\brdrs\brdrw20\brdrcf11 \clbrdrb\brdrs\brdrw20\brdrcf11 \clbrdrr\brdrs\brdrw20\brdrcf11 \clpadt120 \clpadl260 \clpadb120 \clpadr260 \gaph\cellx4320
\clvertalt\clvertalbase \clcbpat12 \clwWidth9727\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf11 \clbrdrl\brdrs\brdrw20\brdrcf11 \clbrdrb\brdrs\brdrw20\brdrcf11 \clbrdrr\brdrs\brdrw20\brdrcf11 \clpadt120 \clpadl260 \clpadb120 \clpadr260 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl340\partightenfactor0
\cf2 4\cell 
\pard\intbl\itap1\pardeftab720\sl340\partightenfactor0
\cf2 10\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trmaxw14000 \tamart400 \trmarl850 \tamarb400 \trmarr850 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth3152\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf11 \clbrdrl\brdrs\brdrw20\brdrcf11 \clbrdrb\brdrs\brdrw20\brdrcf11 \clbrdrr\brdrs\brdrw20\brdrcf11 \clpadt120 \clpadl260 \clpadb120 \clpadr260 \gaph\cellx4320
\clvertalt\clvertalbase \clshdrawnil \clwWidth9727\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf11 \clbrdrl\brdrs\brdrw20\brdrcf11 \clbrdrb\brdrs\brdrw20\brdrcf11 \clbrdrr\brdrs\brdrw20\brdrcf11 \clpadt120 \clpadl260 \clpadb120 \clpadr260 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl340\partightenfactor0
\cf2 5\cell 
\pard\intbl\itap1\pardeftab720\sl340\partightenfactor0
\cf2 15\cell \lastrow\row
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\fs40 \cf2 We can encode a word as a number by taking the sum of its letters based on their position in the alphabet. For example, we can encode "cat" as 24 because c is the 3rd of the alphabet, a is the 1st, and t is the 20th:\
3 + 1 + 20 = 24\
Write a method\'a0
\f2 \cb4 triangular_word?
\f1 \cb1 \'a0that accepts a word as an argument and returns a boolean indicating whether or not that word's number encoding is a triangular number. You can assume that the argument contains lowercase letters.\
Examples\
\pard\pardeftab720\sl480\partightenfactor0

\f3\fs32 \cf5 \cb6 \strokec5 p triangular_word
\f4 ?(\cf9 \strokec9 'abc'\cf5 \strokec5 )
\f3        
\f4 \cf8 \strokec8 # true
\f3 \cf5 \strokec5 \
p triangular_word
\f4 ?(\cf9 \strokec9 'ba'\cf5 \strokec5 )
\f3         
\f4 \cf8 \strokec8 # true
\f3 \cf5 \strokec5 \
p triangular_word
\f4 ?(\cf9 \strokec9 'lovely'\cf5 \strokec5 )
\f3     
\f4 \cf8 \strokec8 # true
\f3 \cf5 \strokec5 \
p triangular_word
\f4 ?(\cf9 \strokec9 'question'\cf5 \strokec5 )
\f3   
\f4 \cf8 \strokec8 # true
\f3 \cf5 \strokec5 \
p triangular_word
\f4 ?(\cf9 \strokec9 'aa'\cf5 \strokec5 )
\f3         
\f4 \cf8 \strokec8 # false
\f3 \cf5 \strokec5 \
p triangular_word
\f4 ?(\cf9 \strokec9 'cd'\cf5 \strokec5 )
\f3         
\f4 \cf8 \strokec8 # false
\f3 \cf5 \strokec5 \
p triangular_word
\f4 ?(\cf9 \strokec9 'cat'\cf5 \strokec5 )
\f3        
\f4 \cf8 \strokec8 # false
\f3 \cf5 \strokec5 \
p triangular_word
\f4 ?(\cf9 \strokec9 'sink'\cf5 \strokec5 )
\f3       
\f4 \cf8 \strokec8 # false
\f3 \cf5 \strokec5 \
\pard\pardeftab720\li840\ri840\sl560\sa400\partightenfactor0

\f0\b\fs48 \cf2 \cb1 \strokec2 \
consecutive_collapse\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\b0\fs40 \cf2 Write a method\'a0
\f2 \cb4 consecutive_collapse
\f1 \cb1 \'a0that accepts an array of numbers as an argument. The method should return a new array that results from continuously removing consecutive numbers that are adjacent in the array. If multiple adjacent pairs are consecutive numbers, remove the leftmost pair first. For example:\
\pard\pardeftab720\sl480\partightenfactor0

\f3\fs32 \cf5 \cb6 \strokec5 [3, 4, 1] -> [1]\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl680\sa100\partightenfactor0
\ls2\ilvl0
\f1\fs40 \cf2 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 because 3 and 4 are consecutive and adjacent numbers, so we can remove them\
\pard\pardeftab720\sl480\partightenfactor0

\f3\fs32 \cf5 \cb6 \strokec5 [1, 4, 3, 7] -> [1, 7]\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl680\sa100\partightenfactor0
\ls3\ilvl0
\f1\fs40 \cf2 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 because 4 and 3 are consecutive and adjacent numbers, so we can remove them\
\pard\pardeftab720\sl480\partightenfactor0

\f3\fs32 \cf5 \cb6 \strokec5 [3, 4, 5] -> [5]\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl680\sa100\partightenfactor0
\ls4\ilvl0
\f1\fs40 \cf2 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 because 4 and 3 are consecutive and adjacent numbers, we don't target 4 and 5 since we should prefer to remove the leftmost pair\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0
\cf2 We can apply this rule repeatedly until we cannot collapse the array any further:\
\pard\pardeftab720\sl480\partightenfactor0

\f3\fs32 \cf5 \cb6 \strokec5 # example 1\
[9, 8, 4, 5, 6] -> [4, 5, 6] -> [6]\
\
# example 2\
[3, 5, 6, 2, 1] -> [3, 2, 1] -> [1]\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\fs40 \cf2 \cb1 \strokec2 Code examples\
\pard\pardeftab720\sl480\partightenfactor0

\f4\fs32 \cf8 \cb6 \strokec8 # p consecutive_collapse([3, 4, 1])                     # [1]
\f3 \cf5 \strokec5 \

\f4 \cf8 \strokec8 # p consecutive_collapse([1, 4, 3, 7])                  # [1, 7]
\f3 \cf5 \strokec5 \

\f4 \cf8 \strokec8 # p consecutive_collapse([9, 8, 2])                     # [2]
\f3 \cf5 \strokec5 \

\f4 \cf8 \strokec8 # p consecutive_collapse([9, 8, 4, 5, 6])               # [6]
\f3 \cf5 \strokec5 \

\f4 \cf8 \strokec8 # p consecutive_collapse([1, 9, 8, 6, 4, 5, 7, 9, 2])   # [1, 9, 2]
\f3 \cf5 \strokec5 \

\f4 \cf8 \strokec8 # p consecutive_collapse([3, 5, 6, 2, 1])               # [1]
\f3 \cf5 \strokec5 \

\f4 \cf8 \strokec8 # p consecutive_collapse([5, 7, 9, 9])                  # [5, 7, 9, 9]
\f3 \cf5 \strokec5 \

\f4 \cf8 \strokec8 # p consecutive_collapse([13, 11, 12, 12])              # []
\f3 \cf5 \strokec5 \
\pard\pardeftab720\li840\ri840\sl560\sa400\partightenfactor0

\f0\b\fs48 \cf2 \cb1 \strokec2 \
pretentious_primes\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\b0\fs40 \cf2 Write a method\'a0
\f2 \cb4 pretentious_primes
\f1 \cb1 \'a0that takes accepts an array and a number, n, as arguments. The method should return a new array where each element of the original array is replaced according to the following rules:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl680\sa100\partightenfactor0
\ls5\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 when the number argument is positive, replace an element with the n-th nearest prime number that is greater than the element\
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 when the number argument is negative, replace an element with the n-th nearest prime number that is less than the element\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0
\cf2 For example:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl680\sa100\partightenfactor0
\ls6\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 if element = 7 and n = 1, then the new element should be 11 because 11 is the nearest prime greater than 7\
\ls6\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 if the element = 7 and n = 2, then the new element should be 13 because 13 is the 2nd nearest prime greater than 7\
\ls6\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 if the element = 7 and n = -1, then the new element should be 5 because 5 is the nearest prime less than 7\
\ls6\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 if the element = 7 and n = -2, then the new element should be 3 because 3 is the 2nd nearest prime less than 7\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0
\cf2 Note that we will always be able to find a prime that is greater than a given number because there are an infinite number of primes (this is given by\'a0{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Euclid%27s_theorem"}}{\fldrslt \cf3 \strokec3 Euclid's Theorem}}). However, we may be unable to find a prime that is smaller than a given number, because 2 is the smallest prime. When a smaller prime cannot be calculated, replace the element with nil.\
Examples\
\pard\pardeftab720\sl480\partightenfactor0

\f4\fs32 \cf8 \cb6 \strokec8 # p pretentious_primes([4, 15, 7], 1)           # [5, 17, 11]
\f3 \cf5 \strokec5 \

\f4 \cf8 \strokec8 # p pretentious_primes([4, 15, 7], 2)           # [7, 19, 13]
\f3 \cf5 \strokec5 \

\f4 \cf8 \strokec8 # p pretentious_primes([12, 11, 14, 15, 7], 1)  # [13, 13, 17, 17, 11]
\f3 \cf5 \strokec5 \

\f4 \cf8 \strokec8 # p pretentious_primes([12, 11, 14, 15, 7], 3)  # [19, 19, 23, 23, 17]
\f3 \cf5 \strokec5 \

\f4 \cf8 \strokec8 # p pretentious_primes([4, 15, 7], -1)          # [3, 13, 5]
\f3 \cf5 \strokec5 \

\f4 \cf8 \strokec8 # p pretentious_primes([4, 15, 7], -2)          # [2, 11, 3]
\f3 \cf5 \strokec5 \

\f4 \cf8 \strokec8 # p pretentious_primes([2, 11, 21], -1)         # [nil, 7, 19]
\f3 \cf5 \strokec5 \

\f4 \cf8 \strokec8 # p pretentious_primes([32, 5, 11], -3)         # [23, nil, 3]
\f3 \cf5 \strokec5 \

\f4 \cf8 \strokec8 # p pretentious_primes([32, 5, 11], -4)         # [19, nil, 2]
\f3 \cf5 \strokec5 \

\f4 \cf8 \strokec8 # p pretentious_primes([32, 5, 11], -5)         # [17, nil, nil]
\f3 \cf5 \strokec5 \
\pard\pardeftab720\sl260\partightenfactor0

\f5\fs21 \cf2 \cb1 \strokec2 \
}