{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf610
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Georgia;\f2\fmodern\fcharset0 Courier;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red10\green92\blue255;\red0\green0\blue0;
\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c0\c46667\c100000;\cssrgb\c0\c0\c0\c7451;
\cssrgb\c100000\c100000\c100000;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww11620\viewh20180\viewkind0
\deftab720
\pard\pardeftab720\li840\ri840\sl860\sa400\partightenfactor0

\f0\b\fs72 \cf2 \expnd0\expndtw0\kerning0
Word Chains\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\b0\fs40 \cf2 Read the\'a0{\field{\*\fldinst{HYPERLINK "http://rubyquiz.com/quiz44.html"}}{\fldrslt \cf3 Word Chains RubyQuiz}}.\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\b \cf2 NB: You shouldn't have to use recursion for this one.
\b0 \

\b NB: Review the entire outline before beginning.
\b0 \
\pard\pardeftab720\li840\ri840\sl720\sa400\partightenfactor0

\f0\b\fs60 \cf2 Phase I: Adjacent Words\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\b0\fs40 \cf2 Let's write a class\'a0
\f2 \cb4 WordChainer
\f1 \cb1 .\
Begin writing the\'a0
\f2 \cb4 #initialize(dictionary_file_name)
\f1 \cb1 \'a0method. Read in the\'a0{\field{\*\fldinst{HYPERLINK "https://assets.aaonline.io/fullstack/ruby/projects/word_chains/dictionary.txt"}}{\fldrslt \cf3 dictionary file}}. Store the array of dictionary words in an instance variable (e.g.,\'a0
\f2 \cb4 @dictionary
\f1 \cb1 ).\
Next, write a helper method\'a0
\f2 \cb4 adjacent_words(word)
\f1 \cb1 . This should return all words in the dictionary one letter different than the current word. By "one letter different" we mean that both words have the same length and only differ at one position, e.g. "mat" and "cat" count as adjacent words, but "cat" and "cats" do not, nor do "cola" and "cool."\
Verify that your\'a0
\f2 \cb4 adjacent_words
\f1 \cb1 \'a0method is working.\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\b \cf2 Hint
\b0 : To speed up your search greatly, store your dictionary as a\'a0{\field{\*\fldinst{HYPERLINK "http://ruby-doc.org/stdlib-2.3.1/libdoc/set/rdoc/Set.html"}}{\fldrslt \cf3 \cb5 Set}}. The\'a0
\f2 \cb4 Set#include?
\f1 \cb1 \'a0method is much faster than\'a0
\f2 \cb4 Array#include?
\f1 \cb1 , since the\'a0
\f2 \cb4 Array
\f1 \cb1 \'a0version needs to iterate through all the elements of the array, whereas\'a0
\f2 \cb4 Set
\f1 \cb1 \'a0uses a cool trick we'll learn about when we get to the algorithms curriculum.\
\pard\pardeftab720\li840\ri840\sl720\sa400\partightenfactor0

\f0\b\fs60 \cf2 Phase IIa: Exploring all words\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\b0\fs40 \cf2 Next, let's begin writing a method\'a0
\f2 \cb4 #run(source, target)
\f1 \cb1 . Our strategy is:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl600\sa400\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Keep a list of\'a0
\f2 \cb4 @current_words
\f1 \cb1 . Start this with just\'a0
\f2 \cb4 [source]
\f1 \cb1 .\uc0\u8232 \
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Also keep a list of\'a0
\f2 \cb4 @all_seen_words
\f1 \cb1 . Start this with just\'a0
\f2 \cb4 [source]
\f1 \cb1 .\uc0\u8232 \
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Begin an outer loop which will run as long as\'a0
\f2 \cb4 @current_words
\f1 \cb1 \'a0is not empty. This will halt our exploration when all words adjacent to\'a0
\f2 \cb4 @current_word
\f1 \cb1 \'a0have been discovered.\uc0\u8232 \
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Inside this loop, create a new, empty list of\'a0
\f2 \cb4 new_current_words
\f1 \cb1 . We're going to fill this up with new words (that aren't in\'a0
\f2 \cb4 @all_seen_words
\f1 \cb1 ) that are adjacent (one step away) from a word in\'a0
\f2 \cb4 @current_words
\f1 \cb1 .\uc0\u8232 \
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
To fill up\'a0
\f2 \cb4 new_current_words
\f1 \cb1 , begin a second, inner loop through\'a0
\f2 \cb4 @current_words
\f1 \cb1 .\uc0\u8232 \
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
For each\'a0
\f2 \cb4 current_word
\f1 \cb1 , begin a third loop, iterating through all\'a0
\f2 \cb4 adjacent_words(current_word)
\f1 \cb1 . This is a triply nested loop.\uc0\u8232 \
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
For each\'a0
\f2 \cb4 adjacent_word
\f1 \cb1 , skip it if it's already in\'a0
\f2 \cb4 @all_seen_words
\f1 \cb1 ; we don't need to reconsider a word we've seen before.\uc0\u8232 \
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Otherwise, if it's a new word, add it to both\'a0
\f2 \cb4 new_current_words
\f1 \cb1 , and\'a0
\f2 \cb4 @all_seen_words
\f1 \cb1 \'a0so we don't repeat it.\uc0\u8232 \
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
After we finish looping through all the\'a0
\f2 \cb4 @current_words
\f1 \cb1 , print out\'a0
\f2 \cb4 new_current_words
\f1 \cb1 , and reset\'a0
\f2 \cb4 @current_words
\f1 \cb1 \'a0to\'a0
\f2 \cb4 new_current_words
\f1 \cb1 .\uc0\u8232 \
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0
\cf2 Make sure your\'a0
\f2 \cb4 run
\f1 \cb1 \'a0method eventually terminates: it should eventually enumerate all the words that are reachable from\'a0
\f2 \cb4 source
\f1 \cb1 , at which point\'a0
\f2 \cb4 new_current_words
\f1 \cb1 \'a0will come out empty. After setting\'a0
\f2 \cb4 @current_words = new_current_words
\f1 \cb1 \'a0the outermost loop should terminate.\
After executing\'a0
\f2 \cb4 #run
\f1 \cb1 ,\'a0
\f2 \cb4 @all_seen_words
\f1 \cb1 \'a0will contain a list of all the words encountered in our 'exploration.'\
Test your word chainer to make sure it outputs (1) first the words that are one letter away from\'a0
\f2 \cb4 source
\f1 \cb1 , (2) next words that are one letter away from words one letter away from\'a0
\f2 \cb4 source
\f1 \cb1 \'a0(i.e., two letters away from source), etc. This is a\'a0
\b breadth first
\b0 \'a0enumeration of words that you can reach from the\'a0
\f2 \cb4 source
\f1 \cb1 .\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\b \cf2 Call your TA over to check your work
\b0 .\
\pard\pardeftab720\li840\ri840\sl720\sa400\partightenfactor0

\f0\b\fs60 \cf2 Phase IIb: Refactor\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\b0\fs40 \cf2 Your code will contain a triply nested loop. Break out the inner loop that iterates through\'a0
\f2 \cb4 @current_words
\f1 \cb1 \'a0and builds and assigns the\'a0
\f2 \cb4 new_current_words
\f1 \cb1 \'a0to its own method:\'a0
\f2 \cb4 #explore_current_words
\f1 \cb1 .\
\pard\pardeftab720\li840\ri840\sl720\sa400\partightenfactor0

\f0\b\fs60 \cf2 Phase III: Keep Track of Prior Words\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\b0\fs40 \cf2 So far we've written our program to build a set of\'a0
\f2 \cb4 @all_seen_words
\f1 \cb1 , adding new words in breadth-first order. However, we don't record enough information to construct a path of words from the\'a0
\f2 \cb4 source
\f1 \cb1 \'a0to the\'a0
\f2 \cb4 target
\f1 \cb1 .\
Let's change our program. For every new word we encounter, let's record which previous word we modified to get to the new word. To do this, instead of keeping an array of\'a0
\f2 \cb4 @all_seen_words
\f1 \cb1 , lets make it a hash, where the keys are new words, and the value is the word we modified to get to the new word.\
Let's start\'a0
\f2 \cb4 @all_seen_words
\f1 \cb1 \'a0out as\'a0
\f2 \cb4 \{ source => nil \}
\f1 \cb1 , since\'a0
\f2 \cb4 source
\f1 \cb1 \'a0didn't come from anywhere. Let's modify\'a0
\f2 \cb4 explore_current_words
\f1 \cb1 \'a0so that instead of merely adding an\'a0
\f2 \cb4 adjacent_word
\f1 \cb1 \'a0to the array, we record it as the key, where the value is the\'a0
\f2 \cb4 current_word
\f1 \cb1 \'a0we came from.\
Modify\'a0
\f2 \cb4 explore_current_words
\f1 \cb1 \'a0to print not just the new words, but where they came from. At the end of\'a0
\f2 \cb4 explore_current_words
\f1 \cb1 , iterate through\'a0
\f2 \cb4 new_current_words
\f1 \cb1 , and print out the new word and the word it came from (the value in the\'a0
\f2 \cb4 @all_seen_words
\f1 \cb1 \'a0hash). Make sure this output makes sense. You may want to use a longer word like\'a0
\f2 \cb4 "market"
\f1 \cb1 \'a0to reduce the verbosity of the output.\
\pard\pardeftab720\li840\ri840\sl720\sa400\partightenfactor0

\f0\b\fs60 \cf2 Phase IV: Backtracking\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\b0\fs40 \cf2 Okay! Right now\'a0
\f2 \cb4 #run
\f1 \cb1 \'a0builds\'a0
\f2 \cb4 @all_seen_words
\f1 \cb1 , but it never constructs the path from the source to the target. Let's use\'a0
\f2 \cb4 @all_seen_words
\f1 \cb1 \'a0to do this.\
Write a method named\'a0
\f2 \cb4 #build_path(target)
\f1 \cb1 . It should look up the target in\'a0
\f2 \cb4 @all_seen_words
\f1 \cb1 . This is the word we were at before the final step to\'a0
\f2 \cb4 target
\f1 \cb1 . Then we need to look up the word we used to get the second to last word. Then the word before that.\
Keep looking back and back in from\'a0
\f2 \cb4 target
\f1 \cb1 \'a0in\'a0
\f2 \cb4 @all_seen_words
\f1 \cb1 . Each time, add the prior word to an array named\'a0
\f2 \cb4 path
\f1 \cb1 . Eventually you will reach\'a0
\f2 \cb4 nil
\f1 \cb1 , which means we've reached the end of the path back to\'a0
\f2 \cb4 source
\f1 \cb1 .\
Have\'a0
\f2 \cb4 #run
\f1 \cb1 \'a0call\'a0
\f2 \cb4 build_path
\f1 \cb1 \'a0and return the array.\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\b \cf2 Make sure to request a code review from your TA once you can find adjacent words
\b0 \
\pard\pardeftab720\li840\ri840\sl720\sa400\partightenfactor0

\f0\b\fs60 \cf2 Bonus Phase: Stop Early\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\b0\fs40 \cf2 Your\'a0
\f2 \cb4 run
\f1 \cb1 \'a0method will build the entire set of reachable words. This is wasteful if the source is close to the target. We can stop early in that case. Modify\'a0
\f2 \cb4 run
\f1 \cb1 \'a0to stop looping when\'a0
\f2 \cb4 @all_seen_words
\f1 \cb1 \'a0contains the target.}