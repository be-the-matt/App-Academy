{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf610
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Georgia;\f2\fnil\fcharset0 Consolas;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red246\green246\blue239;\red34\green34\blue34;
\red10\green92\blue255;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c97255\c97255\c94902;\cssrgb\c17647\c17647\c17647;
\cssrgb\c0\c46667\c100000;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\li840\ri840\sl720\sa400\partightenfactor0

\f0\b\fs60 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Big O-ctopus and Biggest Fish\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\b0\fs40 \cf2 A Very Hungry Octopus wants to eat the longest fish in an array of fish.\
\pard\pardeftab720\sl480\partightenfactor0

\f2\fs32 \cf3 \cb4 \strokec3 ['fish', 'fiiish', 'fiiiiish', 'fiiiish', 'fffish', 'ffiiiiisshh', 'fsh', 'fiiiissshhhhhh']\
=> "fiiiissshhhhhh"\
\pard\pardeftab720\li840\ri840\sl560\sa400\partightenfactor0

\f0\b\fs48 \cf2 \cb1 \strokec2 Sluggish Octopus\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\b0\fs40 \cf2 Find the longest fish in O(n^2) time. Do this by comparing all fish lengths to all other fish lengths\
\pard\pardeftab720\li840\ri840\sl560\sa400\partightenfactor0

\f0\b\fs48 \cf2 Dominant Octopus\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\b0\fs40 \cf2 Find the longest fish in O(n log n) time. Hint: You saw a sorting algorithm that runs in O(n log n) in the\'a0{\field{\*\fldinst{HYPERLINK "https://open.appacademy.io/learn/full-stack-online/ruby/sorting-complexity"}}{\fldrslt \cf5 \strokec5 Sorting Complexity Demo}}. Remember that Big O is classified by the dominant term.\
\pard\pardeftab720\li840\ri840\sl560\sa400\partightenfactor0

\f0\b\fs48 \cf2 Clever Octopus\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\b0\fs40 \cf2 Find the longest fish in O(n) time. The octopus can hold on to the longest fish that you have found so far while stepping through the array only once.\
\pard\pardeftab720\li840\ri840\sl720\sa400\partightenfactor0

\f0\b\fs60 \cf2 Dancing Octopus\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\b0\fs40 \cf2 Full of fish, the Octopus attempts\'a0{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Dance_Dance_Revolution"}}{\fldrslt \cf5 \strokec5 Dance Dance Revolution}}. The game has tiles in the following directions:\
\pard\pardeftab720\sl480\partightenfactor0

\f2\fs32 \cf3 \cb4 \strokec3 tiles_array = ["up", "right-up", "right", "right-down", "down", "left-down", "left",  "left-up" ]\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\fs40 \cf2 \cb1 \strokec2 To play the game, the octopus must step on a tile with her corresponding tentacle. We can assume that the octopus's eight tentacles are numbered and correspond to the tile direction indices.\
\pard\pardeftab720\li840\ri840\sl560\sa400\partightenfactor0

\f0\b\fs48 \cf2 Slow Dance\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\b0\fs40 \cf2 Given a tile direction, iterate through a tiles array to return the tentacle number (tile index) the octopus must move. This should take O(n) time.\
\pard\pardeftab720\sl480\partightenfactor0

\f2\fs32 \cf3 \cb4 \strokec3 slow_dance("up", tiles_array)\
> 0\
\
slow_dance("right-down", tiles_array)\
> 3\
\pard\pardeftab720\li840\ri840\sl560\sa400\partightenfactor0

\f0\b\fs48 \cf2 \cb1 \strokec2 Constant Dance!\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\b0\fs40 \cf2 Now that the octopus is warmed up, let's help her dance faster. Use a different data structure and write a new function so that you can access the tentacle number in O(1) time.\
\pard\pardeftab720\sl480\partightenfactor0

\f2\fs32 \cf3 \cb4 \strokec3 fast_dance("up", new_tiles_data_structure)\
> 0\
\
fast_dance("right-down", new_tiles_data_structure)\
> 3\
}