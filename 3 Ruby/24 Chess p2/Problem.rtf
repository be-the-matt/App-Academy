{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf610
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fmodern\fcharset0 Courier;\f2\fnil\fcharset0 Georgia;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red0\green0\blue0;
\red10\green92\blue255;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c0\c0\c7451;
\cssrgb\c0\c46667\c100000;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\li840\ri840\sl860\sa400\partightenfactor0

\f0\b\fs72 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Chess (Part 2)\
\pard\pardeftab720\li840\ri840\sl720\sa400\partightenfactor0

\fs60 \cf2 Make Sure to Finish Phases I & II before proceeding!\
Phase III:\'a0
\f1\b0 \cb4 Display
\f0\b \cb3 \
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f2\b0\fs40 \cf2 Write a\'a0
\f1 \cb4 Display
\f2 \cb3 \'a0class to handle your rendering logic. Your\'a0
\f1 \cb4 Display
\f2 \cb3 \'a0class should access the board. Require the\'a0{\field{\*\fldinst{HYPERLINK "https://github.com/fazibear/colorize"}}{\fldrslt \cf5 \strokec5 colorize}}\'a0gem so you can render in color.\
Download this\'a0
\f1 \cb4 cursor.rb
\f2 \cb3 \'a0{\field{\*\fldinst{HYPERLINK "https://assets.aaonline.io/fullstack/ruby/projects/chess/cursor.rb"}}{\fldrslt \cf5 \strokec5 file}}. An instance of\'a0
\f1 \cb4 Cursor
\f2 \cb3 \'a0initializes with a\'a0
\f1 \cb4 cursor_pos
\f2 \cb3 \'a0and an instance of\'a0
\f1 \cb4 Board
\f2 \cb3 . The cursor manages user input, according to which it updates its\'a0
\f1 \cb4 @cursor_pos
\f2 \cb3 . The display will render the square at\'a0
\f1 \cb4 @cursor_pos
\f2 \cb3 \'a0in a different color. Within\'a0
\f1 \cb4 display.rb
\f2 \cb3 \'a0require\'a0
\f1 \cb4 cursor.rb
\f2 \cb3 \'a0and set the instance variable\'a0
\f1 \cb4 @cursor
\f2 \cb3 \'a0to\'a0
\f1 \cb4 Cursor.new([0,0], board)
\f2 \cb3 .\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\b \cf2 NB:
\b0 \'a0
\b If you're stuck on making a cursor for more than\'a0
\i\b0 30 minutes
\i0\b , please call for help from a TA
\b0 . Fancy cursors are cool, but the purpose of today is to become more familiar with Object-oriented Programming.\
In\'a0
\f1 \cb4 cursor.rb
\f2 \cb3 \'a0we've provided a\'a0
\f1 \cb4 KEYMAP
\f2 \cb3 \'a0that translates keypresses into actions and movements. The\'a0
\f1 \cb4 MOVES
\f2 \cb3 \'a0hash maps possible movement differentials. You can use the\'a0
\f1 \cb4 #get_input
\f2 \cb3 \'a0method as is.\'a0
\f1 \cb4 #read_char
\f2 \cb3 \'a0handles console input. Skim over\'a0
\f1 \cb4 #read_char
\f2 \cb3 \'a0to gain a general understanding of how the method works. It's all right if the\'a0
\f1 \cb4 STDIN
\f2 \cb3 \'a0methods are unfamiliar. Don't fret the details.\
Fill in the\'a0
\f1 \cb4 #handle_key(key)
\f2 \cb3 \'a0method. Use a\'a0{\field{\*\fldinst{HYPERLINK "http://ruby-doc.org/docs/keywords/1.9/Object.html#method-i-case"}}{\fldrslt \cf5 \strokec5 case statement}}\'a0that switches on the value of\'a0
\f1 \cb4 key
\f2 \cb3 . Depending on the\'a0
\f1 \cb4 key
\f2 \cb3 ,\'a0
\f1 \cb4 #handle_key(key)
\f2 \cb3 \'a0will a) return the\'a0
\f1 \cb4 @cursor_pos
\f2 \cb3 \'a0(in case of\'a0
\f1 \cb4 :return
\f2 \cb3 \'a0or\'a0
\f1 \cb4 :space
\f2 \cb3 ), b) call\'a0
\f1 \cb4 #update_pos
\f2 \cb3 \'a0with the appropriate movement difference from\'a0
\f1 \cb4 MOVES
\f2 \cb3 \'a0and return\'a0
\f1 \cb4 nil
\f2 \cb3 \'a0(in case of\'a0
\f1 \cb4 :left
\f2 \cb3 ,\'a0
\f1 \cb4 :right
\f2 \cb3 ,\'a0
\f1 \cb4 :up
\f2 \cb3 , and\'a0
\f1 \cb4 :down
\f2 \cb3 ), or c) exit from the terminal process (in case of\'a0
\f1 \cb4 :ctrl_c
\f2 \cb3 ). Later we will use our\'a0
\f1 \cb4 Player
\f2 \cb3 \'a0and\'a0
\f1 \cb4 Game
\f2 \cb3 \'a0classes to handle the movement of pieces.\

\b NB:
\b0 \'a0To exit a terminal process, use the\'a0
\f1 \cb4 Process.exit
\f2 \cb3 \'a0method. Pass it the status code\'a0
\f1 \cb4 0
\f2 \cb3 \'a0as an argument. You can read more about\'a0
\f1 \cb4 exit
\f2 \cb3 \'a0{\field{\*\fldinst{HYPERLINK "http://ruby-doc.org/core-2.2.0/Process.html#method-c-exit"}}{\fldrslt \cf5 \strokec5 here}}.\
Fill in the\'a0
\f1 \cb4 #update_pos(diff)
\f2 \cb3 \'a0method. It should use the\'a0
\f1 \cb4 diff
\f2 \cb3 \'a0to reassign\'a0
\f1 \cb4 @cursor_pos
\f2 \cb3 \'a0to a new position. You may wish to write a\'a0
\f1 \cb4 Board#valid_pos?
\f2 \cb3 \'a0method to ensure you update\'a0
\f1 \cb4 @cursor_pos
\f2 \cb3 \'a0only when the new position is on the board.\
Render the square at the\'a0
\f1 \cb4 @cursor_pos
\f2 \cb3 \'a0display in a different color. Test that you can move your cursor around the board by creating and calling a method that loops through\'a0
\f1 \cb4 Display#render
\f2 \cb3 \'a0and\'a0
\f1 \cb4 Cursor#get_input
\f2 \cb3 \'a0(much as\'a0
\f1 \cb4 Player#make_move
\f2 \cb3 \'a0will function later!).\
A nice but optional addition to your cursor class is a boolean instance variable\'a0
\f1 \cb4 selected
\f2 \cb3 \'a0that will allow you to display the cursor in a different color when it has selected a piece. To implement this you will need to\'a0
\f1 \cb4 #toggle_selected
\f2 \cb3 \'a0everytime\'a0
\f1 \cb4 :return
\f2 \cb3 \'a0or\'a0
\f1 \cb4 :space
\f2 \cb3 \'a0is hit.\

\b Time to test!
\b0 \'a0This time you should run\'a0
\f1 \cb4 ruby display.rb
\f2 \cb3 . Does your board render as you would expect? Make sure that as you move your cursor the display updates accordingly. Test the cursor's behavior when you try and move it off the board (the edge cases if you will). Does it do what you expect?\

\b Code Review Time:
\b0 \'a0Before moving on to piece logic, get a code review from a TA!\
\pard\pardeftab720\li840\ri840\sl720\sa400\partightenfactor0

\f0\b\fs60 \cf2 Phase IV:\'a0
\f1\b0 \cb4 Board#in_check?(color)
\f0\b \cb3 \'a0and\'a0
\f1\b0 \cb4 Board#checkmate?(color)
\f0\b \cb3 \
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f2\b0\fs40 \cf2 The\'a0
\f1 \cb4 Board
\f2 \cb3 \'a0class should have a method\'a0
\f1 \cb4 #in_check?(color)
\f2 \cb3 \'a0that returns whether a player is in check. You can implement this by (1) finding the position of the King on the board then (2) seeing if any of the opposing pieces can move to that position.\
Then write a\'a0
\f1 \cb4 #checkmate?(color)
\f2 \cb3 \'a0method. If the player is in check, and if none of the player's pieces have any\'a0
\f1 \cb4 #valid_moves
\f2 \cb3 \'a0(to be implemented in a moment), then the player is in checkmate.\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\i \cf2 NB
\i0 \'a0Here's a four-move sequence to get to checkmate from a starting board for your checkmate testing:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl440\sa100\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 f2, f3\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 e7, e5\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 g2, g4\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 d8, h4\cb1 \
\pard\pardeftab720\li840\ri840\sl720\sa400\partightenfactor0

\f0\b\fs60 \cf2 \cb3 Head to Part 3!\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f2\b0\fs40 \cf2 Once you are finished with Phase IV head over to Part Three.}