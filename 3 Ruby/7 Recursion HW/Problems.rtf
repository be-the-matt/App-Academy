{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf610
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Georgia;\f2\fmodern\fcharset0 Courier;
\f3\fnil\fcharset0 Consolas;\f4\fnil\fcharset0 Menlo-Regular;\f5\fnil\fcharset0 Monaco;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red0\green0\blue0;
\red246\green246\blue239;\red34\green34\blue34;\red100\green108\blue125;\red157\green101\blue255;\red224\green213\blue97;
}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c0\c0\c7451;
\cssrgb\c97255\c97255\c94902;\cssrgb\c17647\c17647\c17647;\cssrgb\c46667\c50196\c56471;\cssrgb\c68235\c50588\c100000;\cssrgb\c90196\c85882\c45490;
}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\li840\ri840\sl860\sa400\partightenfactor0

\f0\b\fs72 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Recursion Homework\cb1 \
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\b0\fs40 \cf2 \cb3 For tonight's exercises, we are going to write several recursive functions. Here's how you should approach each problem: 1. Read the problem statement to make sure you fully understand the problem 2. Identify the base case(s) 3. Determine the inductive step 4. Write the function 5. Run the provided test cases to verify you have a working solution\cb1 \
\cb3 As we learn recursion, it is important that we break down each problem into these steps. Doing so will help us devise solutions and avoid stack overflow errors.\cb1 \
\cb3 If you encounter strange bugs or errors, use\'a0
\f2 \cb4 byebug
\f1 \cb3 !\cb1 \
\pard\pardeftab720\li840\ri840\sl720\sa400\partightenfactor0

\f0\b\fs60 \cf2 \cb3 Exercise 1 -\'a0
\f2\b0 \cb4 sum_to
\f0\b \cb1 \
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\b0\fs40 \cf2 \cb3 Write a function\'a0
\f2 \cb4 sum_to(n)
\f1 \cb3 \'a0that uses recursion to calculate the sum from 1 to n (inclusive of n).\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f3\fs32 \cf5 \cb6 \strokec5   
\f4 \cf7 \strokec7 # Test Cases
\f3 \cf5 \strokec5 \
  sum_to
\f4 (\cf8 \strokec8 5\cf5 \strokec5 )
\f3   
\f4 \cf7 \strokec7 # => returns 15
\f3 \cf5 \strokec5 \
  sum_to
\f4 (\cf8 \strokec8 1\cf5 \strokec5 )
\f3   
\f4 \cf7 \strokec7 # => returns 1
\f3 \cf5 \strokec5 \
  sum_to
\f4 (\cf8 \strokec8 9\cf5 \strokec5 )
\f3   
\f4 \cf7 \strokec7 # => returns 45
\f3 \cf5 \strokec5 \
  sum_to
\f4 (-\cf8 \strokec8 8\cf5 \strokec5 )
\f3   
\f4 \cf7 \strokec7 # => returns nil
\f3 \cf5 \strokec5 \
\pard\pardeftab720\li840\ri840\sl720\sa400\partightenfactor0

\f0\b\fs60 \cf2 \cb3 \strokec2 Exercise 2 -\'a0
\f2\b0 \cb4 add_numbers
\f0\b \cb1 \
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\b0\fs40 \cf2 \cb3 Write a function\'a0
\f2 \cb4 add_numbers(nums_array)
\f1 \cb3 \'a0that takes in an array of Integers and returns the sum of those numbers. Write this method recursively.\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f3\fs32 \cf5 \cb6 \strokec5   
\f4 \cf7 \strokec7 # Test Cases
\f3 \cf5 \strokec5 \
  add_numbers
\f4 ([\cf8 \strokec8 1\cf5 \strokec5 ,\cf8 \strokec8 2\cf5 \strokec5 ,\cf8 \strokec8 3\cf5 \strokec5 ,\cf8 \strokec8 4\cf5 \strokec5 ])
\f3  
\f4 \cf7 \strokec7 # => returns 10
\f3 \cf5 \strokec5 \
  add_numbers
\f4 ([\cf8 \strokec8 3\cf5 \strokec5 ])
\f3  
\f4 \cf7 \strokec7 # => returns 3
\f3 \cf5 \strokec5 \
  add_numbers
\f4 ([-\cf8 \strokec8 80\cf5 \strokec5 ,\cf8 \strokec8 34\cf5 \strokec5 ,\cf8 \strokec8 7\cf5 \strokec5 ])
\f3  
\f4 \cf7 \strokec7 # => returns -39
\f3 \cf5 \strokec5 \
  add_numbers
\f4 ([])
\f3  
\f4 \cf7 \strokec7 # => returns nil
\f3 \cf5 \strokec5 \
\pard\pardeftab720\li840\ri840\sl720\sa400\partightenfactor0

\f0\b\fs60 \cf2 \cb3 \strokec2 Exercise 3 - Gamma Function\cb1 \
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\b0\fs40 \cf2 \cb3 Let's write a method that will solve Gamma Function recursively. The Gamma Function is defined\'a0
\f5 \cb4 \uc0\u915 
\f2 (n) = (n-1)!
\f1 \cb3 .\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f3\fs32 \cf5 \cb6 \strokec5   
\f4 \cf7 \strokec7 # Test Cases
\f3 \cf5 \strokec5 \
  gamma_fnc
\f4 (\cf8 \strokec8 0\cf5 \strokec5 )
\f3   
\f4 \cf7 \strokec7 # => returns nil
\f3 \cf5 \strokec5 \
  gamma_fnc
\f4 (\cf8 \strokec8 1\cf5 \strokec5 )
\f3   
\f4 \cf7 \strokec7 # => returns 1
\f3 \cf5 \strokec5 \
  gamma_fnc
\f4 (\cf8 \strokec8 4\cf5 \strokec5 )
\f3   
\f4 \cf7 \strokec7 # => returns 6
\f3 \cf5 \strokec5 \
  gamma_fnc
\f4 (\cf8 \strokec8 8\cf5 \strokec5 )
\f3   
\f4 \cf7 \strokec7 # => returns 5040
\f3 \cf5 \strokec5 \
\pard\pardeftab720\li840\ri840\sl720\sa400\partightenfactor0

\f0\b\fs60 \cf2 \cb3 \strokec2 Exercise 4 - Ice Cream Shop\cb1 \
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\b0\fs40 \cf2 \cb3 Write a function\'a0
\f2 \cb4 ice_cream_shop(flavors, favorite)
\f1 \cb3 \'a0that takes in an array of ice cream flavors available at the ice cream shop, as well as the user's favorite ice cream flavor. Recursively find out whether or not the shop offers their favorite flavor.\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f3\fs32 \cf5 \cb6 \strokec5   
\f4 \cf7 \strokec7 # Test Cases
\f3 \cf5 \strokec5 \
  ice_cream_shop
\f4 ([\cf9 \strokec9 'vanilla'\cf5 \strokec5 ,
\f3  
\f4 \cf9 \strokec9 'strawberry'\cf5 \strokec5 ],
\f3  
\f4 \cf9 \strokec9 'blue moon'\cf5 \strokec5 )
\f3   
\f4 \cf7 \strokec7 # => returns false
\f3 \cf5 \strokec5 \
  ice_cream_shop
\f4 ([\cf9 \strokec9 'pistachio'\cf5 \strokec5 ,
\f3  
\f4 \cf9 \strokec9 'green tea'\cf5 \strokec5 ,
\f3  
\f4 \cf9 \strokec9 'chocolate'\cf5 \strokec5 ,
\f3  
\f4 \cf9 \strokec9 'mint chip'\cf5 \strokec5 ],
\f3  
\f4 \cf9 \strokec9 'green tea'\cf5 \strokec5 )
\f3   
\f4 \cf7 \strokec7 # => returns true
\f3 \cf5 \strokec5 \
  ice_cream_shop
\f4 ([\cf9 \strokec9 'cookies n cream'\cf5 \strokec5 ,
\f3  
\f4 \cf9 \strokec9 'blue moon'\cf5 \strokec5 ,
\f3  
\f4 \cf9 \strokec9 'superman'\cf5 \strokec5 ,
\f3  
\f4 \cf9 \strokec9 'honey lavender'\cf5 \strokec5 ,
\f3  
\f4 \cf9 \strokec9 'sea salt caramel'\cf5 \strokec5 ],
\f3  
\f4 \cf9 \strokec9 'pistachio'\cf5 \strokec5 )
\f3   
\f4 \cf7 \strokec7 # => returns false
\f3 \cf5 \strokec5 \
  ice_cream_shop
\f4 ([\cf9 \strokec9 'moose tracks'\cf5 \strokec5 ],
\f3  
\f4 \cf9 \strokec9 'moose tracks'\cf5 \strokec5 )
\f3   
\f4 \cf7 \strokec7 # => returns true
\f3 \cf5 \strokec5 \
  ice_cream_shop
\f4 ([],
\f3  
\f4 \cf9 \strokec9 'honey lavender'\cf5 \strokec5 )
\f3   
\f4 \cf7 \strokec7 # => returns false
\f3 \cf5 \strokec5 \
\pard\pardeftab720\li840\ri840\sl720\sa400\partightenfactor0

\f0\b\fs60 \cf2 \cb3 \strokec2 Exercise 5 - Reverse\cb1 \
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\b0\fs40 \cf2 \cb3 Write a function\'a0
\f2 \cb4 reverse(string)
\f1 \cb3 \'a0that takes in a string and returns it reversed.\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f3\fs32 \cf5 \cb6 \strokec5   
\f4 \cf7 \strokec7 # Test Cases
\f3 \cf5 \strokec5 \
  reverse
\f4 (\cf9 \strokec9 "house"\cf5 \strokec5 )
\f3  
\f4 \cf7 \strokec7 # => "esuoh"
\f3 \cf5 \strokec5 \
  reverse
\f4 (\cf9 \strokec9 "dog"\cf5 \strokec5 )
\f3  
\f4 \cf7 \strokec7 # => "god"
\f3 \cf5 \strokec5 \
  reverse
\f4 (\cf9 \strokec9 "atom"\cf5 \strokec5 )
\f3  
\f4 \cf7 \strokec7 # => "mota"
\f3 \cf5 \strokec5 \
  reverse
\f4 (\cf9 \strokec9 "q"\cf5 \strokec5 )
\f3  
\f4 \cf7 \strokec7 # => "q"
\f3 \cf5 \strokec5 \
  reverse
\f4 (\cf9 \strokec9 "id"\cf5 \strokec5 )
\f3  
\f4 \cf7 \strokec7 # => "di"
\f3 \cf5 \strokec5 \
  reverse
\f4 (\cf9 \strokec9 ""\cf5 \strokec5 )
\f3  
\f4 \cf7 \strokec7 # => ""
\f3 \cf5 \strokec5 \
}