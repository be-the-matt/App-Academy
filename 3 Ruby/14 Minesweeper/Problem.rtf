{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf610
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Georgia;\f2\fmodern\fcharset0 Courier;
\f3\fnil\fcharset0 Consolas;\f4\fnil\fcharset0 Menlo-Regular;\f5\fswiss\fcharset0 Helvetica-Light;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red10\green92\blue255;
\red0\green0\blue0;\red246\green246\blue239;\red34\green34\blue34;\red152\green224\blue36;\red224\green213\blue97;
}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c46667\c100000;
\cssrgb\c0\c0\c0\c7451;\cssrgb\c97255\c97255\c94902;\cssrgb\c17647\c17647\c17647;\cssrgb\c65098\c88627\c18039;\cssrgb\c90196\c85882\c45490;
}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid301\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid401\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid5}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}}
\margl1440\margr1440\vieww6620\viewh15500\viewkind0
\deftab720
\pard\pardeftab720\li840\ri840\sl860\sa400\partightenfactor0

\f0\b\fs72 \cf2 \cb3 \expnd0\expndtw0\kerning0
Minesweeper\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\fs40 \cf2 Read all these instructions first. There are useful hints at the end of this document.
\b0 \
Everyone remembers\'a0{\field{\*\fldinst{HYPERLINK "http://minesweeperonline.com/#beginner"}}{\fldrslt \cf4 Minesweeper}}\'a0({\field{\*\fldinst{HYPERLINK "http://en.wikipedia.org/wiki/Minesweeper_(Windows)"}}{\fldrslt \cf4 wiki}}), right? Let's build it!\
\pard\pardeftab720\li840\ri840\sl720\sa400\partightenfactor0

\f0\b\fs60 \cf2 Learning Goals\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl440\sa100\partightenfactor0
\ls1\ilvl0
\f1\b0\fs40 \cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Be comfortable using\'a0
\f2 \cb5 git merge
\f1 \cb3 \'a0to merge a feature branch to the master branch\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Know how to create a remote repository and push to it\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Know how to use recursion to simplify complicated logic\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Know when to separate logic for different parts of your project into different classes\cb1 \
\pard\pardeftab720\li840\ri840\sl560\sa400\partightenfactor0

\f0\b\fs48 \cf2 \cb3 Git a good start!\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\b0\fs40 \cf2 Remember, we're using Git today, so we'll initialize a new repository.\
\pard\pardeftab720\sl480\partightenfactor0

\f3\fs32 \cf6 \cb7 $ 
\f4 \cf8 git
\f3 \cf6  init\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\fs40 \cf2 \cb3 Throughout the day, you should be committing frequently. Follow this sequence of commands each time you commit. Pay attention to the output of each command so that you understand what it's doing. Once you\'a0
\i git
\i0 \'a0how the commands work, you can develop your own routine, but for today, follow this sequence every time.\
\pard\pardeftab720\sl480\partightenfactor0

\f3\fs32 \cf6 \cb7 $ 
\f4 \cf8 git
\f3 \cf6  status\
$ 
\f4 \cf8 git
\f3 \cf6  
\f4 \cf8 diff
\f3 \cf6 \
$ 
\f4 \cf8 git
\f3 \cf6  
\f4 \cf8 add
\f3 \cf6  -A\
$ 
\f4 \cf8 git
\f3 \cf6  status\
$ 
\f4 \cf8 git
\f3 \cf6  
\f4 \cf8 diff
\f3 \cf6  --staged\
$ 
\f4 \cf8 git
\f3 \cf6  commit -m 
\f4 \cf9 "descriptive message about changes"
\f3 \cf6 \
$ 
\f4 \cf8 git
\f3 \cf6  log\
\pard\pardeftab720\li840\ri840\sl560\sa400\partightenfactor0

\f0\b\fs48 \cf2 \cb3 Reveal\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\b0\fs40 \cf2 Start by supporting a single grid size: 9x9; randomly seed it with bombs. The user has two choices each turn:\
First, they can choose a square to reveal. If it contains a bomb, game over. Otherwise, it will be revealed. If none of its neighbors contains a bomb, then all the adjacent neighbors are also revealed. If any of the neighbors have no adjacent bombs, they too are revealed. Et cetera.\
The "fringe" of the revealed area is squares all adjacent to a bomb (or corner). The fringe should be revealed and contain the count of adjacent bombs.\
The goal of the game is to reveal all the bomb-free squares; at this point the game ends and the player wins.\
\pard\pardeftab720\li840\ri840\sl560\sa400\partightenfactor0

\f0\b\fs48 \cf2 Flag bomb\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\b0\fs40 \cf2 The user may also flag a square as containing a bomb. A flagged square cannot be revealed unless it is unflagged first. It's possible to flag a square incorrectly, so the behavior should be the same regardless of whether there's a bomb in that square.\
Flags are there to help the user keep track of bombs and do not factor into the win condition. Once every square that isn't a bomb has been revealed, the player wins regardless of whether they've flagged all the remaining squares.\
\pard\pardeftab720\li840\ri840\sl560\sa400\partightenfactor0

\f0\b\fs48 \cf2 User interaction\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\b0\fs40 \cf2 You decide how to display the current game state to the user. I recommend\'a0
\f2 \cb5 *
\f1 \cb3 \'a0for unexplored squares,\'a0
\f2 \cb5 _
\f1 \cb3 \'a0for "interior" squares when exploring, and a one-digit number for "fringe" squares. I'd put an\'a0
\f2 \cb5 F
\f1 \cb3 \'a0for flagged spots.\
You decide how the user inputs their choice. I recommend a coordinate system. Perhaps they should prefix their choice with either "r" for reveal or "f" for flag.\
\pard\pardeftab720\li840\ri840\sl560\sa400\partightenfactor0

\f0\b\fs48 \cf2 Code Review\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\b0\fs40 \cf2 After you have your UI working, request a code review from your TA and have them check your commit log. Take notes and refactor before moving on.\
\pard\pardeftab720\li840\ri840\sl560\sa400\partightenfactor0

\f5\i\fs48 \cf2 Git
\f0\i0\b \'a0a new feature!\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\b0\fs40 \cf2 By now you should be starting to\'a0
\i git
\i0 \'a0the commit workflow. Let's take things to the next level with\'a0
\b branches
\b0 !\
Create a new branch for your new feature and checkout that branch:\
\pard\pardeftab720\sl480\partightenfactor0

\f3\fs32 \cf6 \cb7 $ git branch save-game\
$ git checkout save-game\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\fs40 \cf2 \cb3 Commit on this "feature branch" until your feature is done. Then switch back to\'a0
\f2 \cb5 master
\f1 \cb3 \'a0and merge the branch in.\
\pard\pardeftab720\sl480\partightenfactor0

\f3\fs32 \cf6 \cb7 $ git checkout master\
$ git merge save-game\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\fs40 \cf2 \cb3 Finally, delete the feature branch. It's been merged, so you no longer need it.\
\pard\pardeftab720\sl480\partightenfactor0

\f3\fs32 \cf6 \cb7 $ git branch -d save-game\
\pard\pardeftab720\li840\ri840\sl560\sa400\partightenfactor0

\f5\i\fs48 \cf2 \cb3 Git
\f0\i0\b \'a0shorter.\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\b0\fs40 \cf2 This is also a good time to mention that the student computers have a bunch of useful Git aliases that save you typing! These include:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl460\sa100\partightenfactor0
\ls2\ilvl0
\f2 \cf2 \cb5 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
git co
\f1 \cb3 \'a0=>\'a0
\f2 \cb5 git checkout
\f1 \cb1 \
\ls2\ilvl0
\f2 \cb5 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
git s
\f1 \cb3 \'a0=>\'a0
\f2 \cb5 git status
\f1 \cb1 \
\ls2\ilvl0
\f2 \cb5 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
git l
\f1 \cb3 \'a0=> super awesome version of\'a0
\f2 \cb5 git log
\f1 \cb1 \
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0
\cf2 \cb3 Type\'a0
\f2 \cb5 git alias
\f1 \cb3 \'a0to see them all.\
\pard\pardeftab720\li840\ri840\sl560\sa400\partightenfactor0

\f0\b\fs48 \cf2 Saving Games\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\b0\fs40 \cf2 Add save/load functionality. Use YAML to let users save/load their minesweeper game to/from a file. Be sure to use a branch for this feature.\
Reference\'a0{\field{\*\fldinst{HYPERLINK "https://open.appacademy.io/learn/full-stack-online/ruby/serialization--json-and-yaml-"}}{\fldrslt \cf4 the readings on serialization}}.\
\pard\pardeftab720\li840\ri840\sl560\sa400\partightenfactor0

\f0\b\fs48 \cf2 Bonus Features\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\b0\fs40 \cf2 Start implementing the following features. Before you begin each feature, create a feature branch for it and then merge that branch back in when you're done.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl440\sa100\partightenfactor0
\ls3\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Colorize!\cb1 \
\ls3\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Cursor Input! ({\field{\*\fldinst{HYPERLINK "https://gist.github.com/acook/4190379"}}{\fldrslt \cf4 This}}\'a0is a good starting point)\cb1 \
\ls3\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Track the time it takes for the user to solve the game. You might keep track of the ten best times in a leaderboard, too. You could keep separate lists for the different sizes. It's up to you!\cb1 \
\pard\pardeftab720\li840\ri840\sl560\sa400\partightenfactor0

\f5\i\fs48 \cf2 \cb3 Git
\f0\i0\b \'a0your project online!\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\b0\fs40 \cf2 At the end of the day, however far you get in the project, you should push your code to Github. That way it's saved online and you can access it from anywhere. Some projects make good showpieces during the job search, so it's often a good idea to do this.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl600\sa400\partightenfactor0
\ls4\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	0.	}\expnd0\expndtw0\kerning0
Each of you will need to login to Github and\'a0{\field{\*\fldinst{HYPERLINK "https://help.github.com/articles/creating-a-new-repository/"}}{\fldrslt \cf4 create a new repository}}.\'a0
\i Do not
\i0 \'a0include a\'a0
\f2 \cb5 README.md
\f1 \cb3 \'a0or\'a0
\f2 \cb5 .gitignore
\f1 \cb3 . It should be completely empty.\cb1 \uc0\u8232 \
\ls4\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	1.	}\expnd0\expndtw0\kerning0
add each repository as a remote\cb1 \uc0\u8232 \
\pard\pardeftab720\sl480\partightenfactor0

\f3\fs32 \cf6 \cb7 $ 
\f4 \cf8 git
\f3 \cf6  remote 
\f4 \cf8 add
\f3 \cf6  partner1 https://github.com/partner1/minesweeper.git\
$ 
\f4 \cf8 git
\f3 \cf6  remote 
\f4 \cf8 add
\f3 \cf6  partner2 https://github.com/partner2/minesweeper.git\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl440\sa100\partightenfactor0
\ls5\ilvl0
\f1\fs40 \cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	0.	}\expnd0\expndtw0\kerning0
push your code\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f3\fs32 \cf6 \cb7 $ git push partner1 master\
$ git push partner2 master\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\b\fs40 \cf2 \cb3 NB:
\b0 \'a0If you want the commits to be under your name as opposed to "aastudent",\'a0{\field{\*\fldinst{HYPERLINK "https://open.appacademy.io/learn/full-stack-online/ruby/fixing-git-commit-authorship"}}{\fldrslt \cf4 rewrite the Git authorship}}\'a0before each push.\
\pard\pardeftab720\li840\ri840\sl560\sa400\partightenfactor0

\f0\b\fs48 \cf2 Hints\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\b0\fs40 \cf2 I think you should have a\'a0
\f2 \cb5 Tile
\f1 \cb3 \'a0class; there's a lot of information to track about a\'a0
\f2 \cb5 Tile
\f1 \cb3 \'a0(bombed? flagged? revealed?) and some helpful methods you could write (
\f2 \cb5 #reveal
\f1 \cb3 ,\'a0
\f2 \cb5 #neighbors
\f1 \cb3 ,\'a0
\f2 \cb5 #neighbor_bomb_count
\f1 \cb3 ). I would also have a\'a0
\f2 \cb5 Board
\f1 \cb3 \'a0class.\
You should separate logic pertaining to Game UI and turn-taking from the\'a0
\f2 \cb5 Tile
\f1 \cb3 /
\f2 \cb5 Board
\f1 \cb3 \'a0classes.\
You'll want to pass the\'a0
\f2 \cb5 Board
\f1 \cb3 \'a0to the\'a0
\f2 \cb5 Tile
\f1 \cb3 \'a0on initialize so the\'a0
\f2 \cb5 Tile
\f1 \cb3 \'a0instance can use it to find its neighbors. But then if at some point you use\'a0
\f2 \cb5 p
\f1 \cb3 \'a0to print out a\'a0
\f2 \cb5 Tile
\f1 \cb3 \'a0instance, you'll get way more info than you need, as the data for the\'a0
\f2 \cb5 Board
\f1 \cb3 \'a0it holds will also be printed. You can fix this by overriding (defining) the\'a0
\f2 \cb5 inspect
\f1 \cb3 \'a0method in your\'a0
\f2 \cb5 Tile
\f1 \cb3 \'a0class, having it return a string that contains just the info you want (e.g. the\'a0
\f2 \cb5 Tile
\f1 \cb3 s position and bombed, flagged, etc. state). See\'a0{\field{\*\fldinst{HYPERLINK "https://open.appacademy.io/learn/full-stack-online/ruby/inspecting-complex-elements"}}{\fldrslt \cf4 here}}\'a0for more info if you need a refresher on how to do this.\
If you use command line arguments and\'a0
\f2 \cb5 ARGV
\f1 \cb3 \'a0to specify the name of the save file to load, you may be surprised to find that console input is broken.\'a0{\field{\*\fldinst{HYPERLINK "https://www.ruby-forum.com/topic/185266#809660"}}{\fldrslt \cf4 This ruby-forum.com post}}\'a0explains how\'a0
\f2 \cb5 gets
\f1 \cb3 \'a0interacts with\'a0
\f2 \cb5 ARGV
\f1 \cb3 /
\f2 \cb5 ARGF
\f1 \cb3 .\
}