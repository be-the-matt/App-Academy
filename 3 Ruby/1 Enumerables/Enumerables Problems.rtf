{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf610
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Georgia;\f2\fmodern\fcharset0 Courier;
\f3\fswiss\fcharset0 Helvetica-Light;\f4\fnil\fcharset0 Consolas;\f5\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue0;\red10\green92\blue255;
\red255\green255\blue255;\red246\green246\blue239;\red34\green34\blue34;\red100\green108\blue125;\red157\green101\blue255;
\red88\green209\blue235;\red224\green213\blue97;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c0\c0\c0\c7451;\cssrgb\c0\c46667\c100000;
\cssrgb\c100000\c100000\c100000;\cssrgb\c97255\c97255\c94902;\cssrgb\c17647\c17647\c17647;\cssrgb\c46667\c50196\c56471;\cssrgb\c68235\c50588\c100000;
\cssrgb\c40000\c85098\c93725;\cssrgb\c90196\c85882\c45490;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\margl1440\margr1440\vieww9920\viewh20180\viewkind0
\deftab720
\pard\pardeftab720\li840\ri840\sl860\sa400\partightenfactor0

\f0\b\fs72 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Pre-Exercise Note\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\b0\fs40 \cf2 From this point on, we will be using the command line and\'a0
\f2 \cb3 pry
\f1 \cb1 \'a0to test our code, navigate our computer, and perform many other amazing tasks.\
This means that we are\'a0
\b not
\b0 \'a0using repl.it anymore to test our code.\
Getting comfortable with these tools early will be very important in becoming an efficient developer. After learning them, these tools will make just about any operation you can think of faster than using a GUI and mouse.\
\pard\pardeftab720\li840\ri840\sl860\sa400\partightenfactor0

\f0\b\fs72 \cf2 Iteration Exercises\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\b0\fs40 \cf2 We're going to implement some\'a0
\f2 \cb3 Array
\f1 \cb1 \'a0methods. There are descriptions for each method, but it may help to also consult the official Ruby docs for\'a0{\field{\*\fldinst{HYPERLINK "http://ruby-doc.org/core-2.1.2/Enumerable.html"}}{\fldrslt \cf4 \cb5 \strokec4 Enumerable}}\'a0and\'a0{\field{\*\fldinst{HYPERLINK "http://ruby-doc.org/core-2.1.2/Array.html"}}{\fldrslt \cf4 \cb5 \strokec4 Array}}. These are good resources in general, and useful reading during this first week.\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\b \cf2 Note:
\b0 \'a0Unlike in the prepwork, there are no specs to compare against. You'll have to test your code in\'a0
\f2 \cb3 pry
\f1 \cb1 .\
\pard\pardeftab720\li840\ri840\sl720\sa400\partightenfactor0

\f0\b\fs60 \cf2 Learning Goals\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl680\sa100\partightenfactor0
\ls1\ilvl0
\f1\b0\fs40 \cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Be able to create directories and files from the command line\
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Know how to extend classes\
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Know how to use pry to test methods\
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Be able to write methods that take a block as an argument\
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Get comfortable reasoning about how enumerable methods work with arrays\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0
\cf2 Start by opening the terminal and changing your directory to the Desktop using the\'a0
\f2 \cb3 cd
\f1 \cb1 \'a0command. Create a new directory for your work using the\'a0
\f2 \cb3 mkdir
\f1 \cb1 \'a0command and then open a new file in VS Code called\'a0
\f2 \cb3 enumerables.rb
\f1 \cb1 \'a0using the\'a0
\f2 \cb3 code
\f1 \cb1 \'a0command.\
\pard\pardeftab720\li840\ri840\sl860\sa400\partightenfactor0
{\field{\*\fldinst{HYPERLINK "http://ruby-doc.org/core-2.1.2/Enumerable.html"}}{\fldrslt 
\f3\fs72 \cf4 \strokec4 Enumerable}}
\f0\b\fs72 \
\pard\pardeftab720\li840\ri840\sl560\sa400\partightenfactor0

\fs48 \cf2 My Each\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\b0\fs40 \cf2 Extend the Array class to include a method named\'a0
\f2 \cb3 my_each
\f1 \cb1 \'a0that takes a block, calls the block on every element of the array, and returns the original array. Do not use Enumerable's\'a0
\f2 \cb3 each
\f1 \cb1 \'a0method. I want to be able to write:\
\pard\pardeftab720\sl480\partightenfactor0

\f4\fs32 \cf6 \cb7 \strokec6  
\f5 \cf8 \strokec8 # calls my_each twice on the array, printing all the numbers twice.
\f4 \cf6 \strokec6 \
return_value 
\f5 =
\f4  
\f5 [\cf9 \strokec9 1\cf6 \strokec6 ,
\f4  
\f5 \cf9 \strokec9 2\cf6 \strokec6 ,
\f4  
\f5 \cf9 \strokec9 3\cf6 \strokec6 ].
\f4 my_each 
\f5 \cf10 \strokec10 do
\f4 \cf6 \strokec6  
\f5 |
\f4 num
\f5 |
\f4 \
  puts num\
\pard\pardeftab720\sl480\partightenfactor0

\f5 \cf10 \strokec10 end\cf6 \strokec6 .
\f4 my_each 
\f5 \cf10 \strokec10 do
\f4 \cf6 \strokec6  
\f5 |
\f4 num
\f5 |
\f4 \
  puts num\

\f5 \cf10 \strokec10 end
\f4 \cf6 \strokec6 \
\pard\pardeftab720\sl480\partightenfactor0

\f5 \cf8 \strokec8 # => 1
\f4 \cf6 \strokec6 \
     
\f5 \cf9 \strokec9 2
\f4 \cf6 \strokec6 \
     
\f5 \cf9 \strokec9 3
\f4 \cf6 \strokec6 \
     
\f5 \cf9 \strokec9 1
\f4 \cf6 \strokec6 \
     
\f5 \cf9 \strokec9 2
\f4 \cf6 \strokec6 \
     
\f5 \cf9 \strokec9 3
\f4 \cf6 \strokec6 \
\
p return_value  
\f5 \cf8 \strokec8 # => [1, 2, 3]
\f4 \cf6 \strokec6 \
\pard\pardeftab720\li840\ri840\sl560\sa400\partightenfactor0

\f0\b\fs48 \cf2 \cb1 \strokec2 \
My Select\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\b0\fs40 \cf2 Now extend the Array class to include\'a0
\f2 \cb3 my_select
\f1 \cb1 \'a0that takes a block and returns a new array containing only elements that satisfy the block. Use your\'a0
\f2 \cb3 my_each
\f1 \cb1 \'a0method!\
Example:\
\pard\pardeftab720\sl480\partightenfactor0

\f4\fs32 \cf6 \cb7 \strokec6 a 
\f5 =
\f4  
\f5 [\cf9 \strokec9 1\cf6 \strokec6 ,
\f4  
\f5 \cf9 \strokec9 2\cf6 \strokec6 ,
\f4  
\f5 \cf9 \strokec9 3\cf6 \strokec6 ]
\f4 \
a
\f5 .
\f4 my_select 
\f5 \{
\f4  
\f5 |
\f4 num
\f5 |
\f4  num 
\f5 >
\f4  
\f5 \cf9 \strokec9 1
\f4 \cf6 \strokec6  
\f5 \}
\f4  
\f5 \cf8 \strokec8 # => [2, 3]
\f4 \cf6 \strokec6 \
a
\f5 .
\f4 my_select 
\f5 \{
\f4  
\f5 |
\f4 num
\f5 |
\f4  num 
\f5 ==
\f4  
\f5 \cf9 \strokec9 4
\f4 \cf6 \strokec6  
\f5 \}
\f4  
\f5 \cf8 \strokec8 # => []
\f4 \cf6 \strokec6 \
\pard\pardeftab720\li840\ri840\sl560\sa400\partightenfactor0

\f0\b\fs48 \cf2 \cb1 \strokec2 \
My Reject\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\b0\fs40 \cf2 Write\'a0
\f2 \cb3 my_reject
\f1 \cb1 \'a0to take a block and return a new array excluding elements that satisfy the block.\
Example:\
\pard\pardeftab720\sl480\partightenfactor0

\f4\fs32 \cf6 \cb7 \strokec6 a 
\f5 =
\f4  
\f5 [\cf9 \strokec9 1\cf6 \strokec6 ,
\f4  
\f5 \cf9 \strokec9 2\cf6 \strokec6 ,
\f4  
\f5 \cf9 \strokec9 3\cf6 \strokec6 ]
\f4 \
a
\f5 .
\f4 my_reject 
\f5 \{
\f4  
\f5 |
\f4 num
\f5 |
\f4  num 
\f5 >
\f4  
\f5 \cf9 \strokec9 1
\f4 \cf6 \strokec6  
\f5 \}
\f4  
\f5 \cf8 \strokec8 # => [1]
\f4 \cf6 \strokec6 \
a
\f5 .
\f4 my_reject 
\f5 \{
\f4  
\f5 |
\f4 num
\f5 |
\f4  num 
\f5 ==
\f4  
\f5 \cf9 \strokec9 4
\f4 \cf6 \strokec6  
\f5 \}
\f4  
\f5 \cf8 \strokec8 # => [1, 2, 3]
\f4 \cf6 \strokec6 \
\pard\pardeftab720\li840\ri840\sl560\sa400\partightenfactor0

\f0\b\fs48 \cf2 \cb1 \strokec2 \
My Any\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\b0\fs40 \cf2 Write\'a0
\f2 \cb3 my_any?
\f1 \cb1 \'a0to return true if any elements of the array satisfy the block and\'a0
\f2 \cb3 my_all?
\f1 \cb1 \'a0to return true only if all elements satisfy the block.\
Example:\
\pard\pardeftab720\sl480\partightenfactor0

\f4\fs32 \cf6 \cb7 \strokec6 a 
\f5 =
\f4  
\f5 [\cf9 \strokec9 1\cf6 \strokec6 ,
\f4  
\f5 \cf9 \strokec9 2\cf6 \strokec6 ,
\f4  
\f5 \cf9 \strokec9 3\cf6 \strokec6 ]
\f4 \
a
\f5 .
\f4 my_any
\f5 ?
\f4  
\f5 \{
\f4  
\f5 |
\f4 num
\f5 |
\f4  num 
\f5 >
\f4  
\f5 \cf9 \strokec9 1
\f4 \cf6 \strokec6  
\f5 \}
\f4  
\f5 \cf8 \strokec8 # => true
\f4 \cf6 \strokec6 \
a
\f5 .
\f4 my_any
\f5 ?
\f4  
\f5 \{
\f4  
\f5 |
\f4 num
\f5 |
\f4  num 
\f5 ==
\f4  
\f5 \cf9 \strokec9 4
\f4 \cf6 \strokec6  
\f5 \}
\f4  
\f5 \cf8 \strokec8 # => false
\f4 \cf6 \strokec6 \
a
\f5 .
\f4 my_all
\f5 ?
\f4  
\f5 \{
\f4  
\f5 |
\f4 num
\f5 |
\f4  num 
\f5 >
\f4  
\f5 \cf9 \strokec9 1
\f4 \cf6 \strokec6  
\f5 \}
\f4  
\f5 \cf8 \strokec8 # => false
\f4 \cf6 \strokec6 \
a
\f5 .
\f4 my_all
\f5 ?
\f4  
\f5 \{
\f4  
\f5 |
\f4 num
\f5 |
\f4  num 
\f5 <
\f4  
\f5 \cf9 \strokec9 4
\f4 \cf6 \strokec6  
\f5 \}
\f4  
\f5 \cf8 \strokec8 # => true
\f4 \cf6 \strokec6 \
\pard\pardeftab720\li840\ri840\sl860\sa400\partightenfactor0

\f3\fs72 \cf4 \cb1 \strokec4 \
{\field{\*\fldinst{HYPERLINK "http://ruby-doc.org/core-2.1.2/Array.html"}}{\fldrslt Array}}
\f0\b \cf2 \strokec2 \
\pard\pardeftab720\li840\ri840\sl560\sa400\partightenfactor0

\fs48 \cf2 My Flatten\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f2\b0\fs40 \cf2 \cb3 my_flatten
\f1 \cb1 \'a0should return all elements of the array into a new, one-dimensional array. Hint: use recursion!\
Example:\
\pard\pardeftab720\sl480\partightenfactor0

\f5\fs32 \cf6 \cb7 \strokec6 [\cf9 \strokec9 1\cf6 \strokec6 ,
\f4  
\f5 \cf9 \strokec9 2\cf6 \strokec6 ,
\f4  
\f5 \cf9 \strokec9 3\cf6 \strokec6 ,
\f4  
\f5 [\cf9 \strokec9 4\cf6 \strokec6 ,
\f4  
\f5 [\cf9 \strokec9 5\cf6 \strokec6 ,
\f4  
\f5 \cf9 \strokec9 6\cf6 \strokec6 ]],
\f4  
\f5 [[[\cf9 \strokec9 7\cf6 \strokec6 ]],
\f4  
\f5 \cf9 \strokec9 8\cf6 \strokec6 ]].
\f4 my_flatten 
\f5 \cf8 \strokec8 # => [1, 2, 3, 4, 5, 6, 7, 8]
\f4 \cf6 \strokec6 \
\pard\pardeftab720\li840\ri840\sl560\sa400\partightenfactor0

\f0\b\fs48 \cf2 \cb1 \strokec2 \
My Zip\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\b0\fs40 \cf2 Write\'a0
\f2 \cb3 my_zip
\f1 \cb1 \'a0to take any number of arguments. It should return a new array containing\'a0
\f2 \cb3 self.length
\f1 \cb1 \'a0elements. Each element of the new array should be an array with a length of the input arguments + 1 and contain the merged elements at that index. If the size of any argument is less than\'a0
\f2 \cb3 self
\f1 \cb1 ,\'a0
\f2 \cb3 nil
\f1 \cb1 \'a0is returned for that location.\
Example:\
\pard\pardeftab720\sl480\partightenfactor0

\f4\fs32 \cf6 \cb7 \strokec6 a 
\f5 =
\f4  
\f5 [
\f4  
\f5 \cf9 \strokec9 4\cf6 \strokec6 ,
\f4  
\f5 \cf9 \strokec9 5\cf6 \strokec6 ,
\f4  
\f5 \cf9 \strokec9 6
\f4 \cf6 \strokec6  
\f5 ]
\f4 \
b 
\f5 =
\f4  
\f5 [
\f4  
\f5 \cf9 \strokec9 7\cf6 \strokec6 ,
\f4  
\f5 \cf9 \strokec9 8\cf6 \strokec6 ,
\f4  
\f5 \cf9 \strokec9 9
\f4 \cf6 \strokec6  
\f5 ]
\f4 \
\pard\pardeftab720\sl480\partightenfactor0

\f5 \cf6 [\cf9 \strokec9 1\cf6 \strokec6 ,
\f4  
\f5 \cf9 \strokec9 2\cf6 \strokec6 ,
\f4  
\f5 \cf9 \strokec9 3\cf6 \strokec6 ].
\f4 my_zip
\f5 (
\f4 a
\f5 ,
\f4  b
\f5 )
\f4  
\f5 \cf8 \strokec8 # => [[1, 4, 7], [2, 5, 8], [3, 6, 9]]
\f4 \cf6 \strokec6 \
a
\f5 .
\f4 my_zip
\f5 ([\cf9 \strokec9 1\cf6 \strokec6 ,\cf9 \strokec9 2\cf6 \strokec6 ],
\f4  
\f5 [\cf9 \strokec9 8\cf6 \strokec6 ])
\f4    
\f5 \cf8 \strokec8 # => [[4, 1, 8], [5, 2, nil], [6, nil, nil]]
\f4 \cf6 \strokec6 \

\f5 [\cf9 \strokec9 1\cf6 \strokec6 ,
\f4  
\f5 \cf9 \strokec9 2\cf6 \strokec6 ].
\f4 my_zip
\f5 (
\f4 a
\f5 ,
\f4  b
\f5 )
\f4     
\f5 \cf8 \strokec8 # => [[1, 4, 7], [2, 5, 8]]
\f4 \cf6 \strokec6 \
\
c 
\f5 =
\f4  
\f5 [\cf9 \strokec9 10\cf6 \strokec6 ,
\f4  
\f5 \cf9 \strokec9 11\cf6 \strokec6 ,
\f4  
\f5 \cf9 \strokec9 12\cf6 \strokec6 ]
\f4 \
d 
\f5 =
\f4  
\f5 [\cf9 \strokec9 13\cf6 \strokec6 ,
\f4  
\f5 \cf9 \strokec9 14\cf6 \strokec6 ,
\f4  
\f5 \cf9 \strokec9 15\cf6 \strokec6 ]
\f4 \

\f5 [\cf9 \strokec9 1\cf6 \strokec6 ,
\f4  
\f5 \cf9 \strokec9 2\cf6 \strokec6 ].
\f4 my_zip
\f5 (
\f4 a
\f5 ,
\f4  b
\f5 ,
\f4  c
\f5 ,
\f4  d
\f5 )
\f4     
\f5 \cf8 \strokec8 # => [[1, 4, 7, 10, 13], [2, 5, 8, 11, 14]]
\f4 \cf6 \strokec6 \
\pard\pardeftab720\li840\ri840\sl560\sa400\partightenfactor0

\f0\b\fs48 \cf2 \cb1 \strokec2 \
My Rotate\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\b0\fs40 \cf2 Write a method\'a0
\f2 \cb3 my_rotate
\f1 \cb1 \'a0that returns a new array containing all the elements of the original array in a rotated order. By default, the array should rotate by one element. If a negative value is given, the array is rotated in the opposite direction.\
Example:\
\pard\pardeftab720\sl480\partightenfactor0

\f4\fs32 \cf6 \cb7 \strokec6 a 
\f5 =
\f4  
\f5 [
\f4  
\f5 \cf11 \strokec11 "a"\cf6 \strokec6 ,
\f4  
\f5 \cf11 \strokec11 "b"\cf6 \strokec6 ,
\f4  
\f5 \cf11 \strokec11 "c"\cf6 \strokec6 ,
\f4  
\f5 \cf11 \strokec11 "d"
\f4 \cf6 \strokec6  
\f5 ]
\f4 \
a
\f5 .
\f4 my_rotate         
\f5 \cf8 \strokec8 #=> ["b", "c", "d", "a"]
\f4 \cf6 \strokec6 \
a
\f5 .
\f4 my_rotate
\f5 (\cf9 \strokec9 2\cf6 \strokec6 )
\f4       
\f5 \cf8 \strokec8 #=> ["c", "d", "a", "b"]
\f4 \cf6 \strokec6 \
a
\f5 .
\f4 my_rotate
\f5 (-\cf9 \strokec9 3\cf6 \strokec6 )
\f4      
\f5 \cf8 \strokec8 #=> ["b", "c", "d", "a"]
\f4 \cf6 \strokec6 \
a
\f5 .
\f4 my_rotate
\f5 (\cf9 \strokec9 15\cf6 \strokec6 )
\f4      
\f5 \cf8 \strokec8 #=> ["d", "a", "b", "c"]
\f4 \cf6 \strokec6 \
\pard\pardeftab720\li840\ri840\sl560\sa400\partightenfactor0

\f0\b\fs48 \cf2 \cb1 \strokec2 \
My Join\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f2\b0\fs40 \cf2 \cb3 my_join
\f1 \cb1 \'a0returns a single string containing all the elements of the array, separated by the given string separator. If no separator is given, an empty string is used.\
Example:\
\pard\pardeftab720\sl480\partightenfactor0

\f4\fs32 \cf6 \cb7 \strokec6 a 
\f5 =
\f4  
\f5 [
\f4  
\f5 \cf11 \strokec11 "a"\cf6 \strokec6 ,
\f4  
\f5 \cf11 \strokec11 "b"\cf6 \strokec6 ,
\f4  
\f5 \cf11 \strokec11 "c"\cf6 \strokec6 ,
\f4  
\f5 \cf11 \strokec11 "d"
\f4 \cf6 \strokec6  
\f5 ]
\f4 \
a
\f5 .
\f4 my_join         
\f5 \cf8 \strokec8 # => "abcd"
\f4 \cf6 \strokec6 \
a
\f5 .
\f4 my_join
\f5 (\cf11 \strokec11 "$"\cf6 \strokec6 )
\f4     
\f5 \cf8 \strokec8 # => "a$b$c$d"
\f4 \cf6 \strokec6 \
\pard\pardeftab720\li840\ri840\sl560\sa400\partightenfactor0

\f0\b\fs48 \cf2 \cb1 \strokec2 \
My Reverse\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\b0\fs40 \cf2 Write a method that returns a new array containing all the elements of the original array in reverse order.\
Example:\
\pard\pardeftab720\sl480\partightenfactor0

\f5\fs32 \cf6 \cb7 \strokec6 [
\f4  
\f5 \cf11 \strokec11 "a"\cf6 \strokec6 ,
\f4  
\f5 \cf11 \strokec11 "b"\cf6 \strokec6 ,
\f4  
\f5 \cf11 \strokec11 "c"
\f4 \cf6 \strokec6  
\f5 ].
\f4 my_reverse   
\f5 \cf8 \strokec8 #=> ["c", "b", "a"]
\f4 \cf6 \strokec6 \

\f5 [
\f4  
\f5 \cf9 \strokec9 1
\f4 \cf6 \strokec6  
\f5 ].
\f4 my_reverse               
\f5 \cf8 \strokec8 #=> [1]
\f4 \cf6 \strokec6 \
\pard\pardeftab720\li840\ri840\sl720\sa400\partightenfactor0

\f0\b\fs60 \cf2 \cb1 \strokec2 \
Review\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1\b0\fs40 \cf2 Now that we're all warmed up, let's review the\'a0{\field{\*\fldinst{HYPERLINK "https://assets.aaonline.io/fullstack/ruby/assets/prep_iteration_exercises.rb"}}{\fldrslt \cf4 \strokec4 iteration exercises}}\'a0from the prepwork. Implement the following methods:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl680\sa100\partightenfactor0
\ls2\ilvl0
\f2 \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 #factors(num)
\f1 \cb1 \
\ls2\ilvl0
\f2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 #bubble_sort!(&prc)
\f1 \cb1 \
\ls2\ilvl0
\f2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 #bubble_sort(&prc)
\f1 \cb1 \
\ls2\ilvl0
\f2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 #substrings(string)
\f1 \cb1 \
\ls2\ilvl0
\f2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 #subwords(word, dictionary)
\f1 \cb1 \
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0
\cf2 Although these exercises are from the prepwork and come with specs, use this opportunity to practice your own testing skills. Write out each method, think of a few different example cases, and test out your code in\'a0
\f2 \cb3 pry
\f1 \cb1 .\
If you are having a tough time thinking of example cases, check out the\'a0{\field{\*\fldinst{HYPERLINK "https://assets.aaonline.io/fullstack/ruby/assets/w1d1_spec.zip"}}{\fldrslt \cf4 \strokec4 specs}}. You can use those examples to test your solutions. Don't forget to move your\'a0
\f2 \cb3 enumerables_array.rb
\f1 \cb1 \'a0into a\'a0
\f2 \cb3 lib
\f1 \cb1 \'a0directory!}