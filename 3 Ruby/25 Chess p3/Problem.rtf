{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf610
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fmodern\fcharset0 Courier;\f2\fnil\fcharset0 Georgia;
\f3\fnil\fcharset0 Menlo-Regular;\f4\fnil\fcharset0 Consolas;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red0\green0\blue0;
\red100\green108\blue125;\red34\green34\blue34;\red246\green246\blue239;\red157\green101\blue255;\red88\green209\blue235;
\red224\green213\blue97;\red10\green92\blue255;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c0\c0\c7451;
\cssrgb\c46667\c50196\c56471;\cssrgb\c17647\c17647\c17647;\cssrgb\c97255\c97255\c94902;\cssrgb\c68235\c50588\c100000;\cssrgb\c40000\c85098\c93725;
\cssrgb\c90196\c85882\c45490;\cssrgb\c0\c46667\c100000;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\li840\ri840\sl860\sa400\partightenfactor0

\f0\b\fs72 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Chess (Part 3)\
\pard\pardeftab720\li840\ri840\sl720\sa400\partightenfactor0

\fs60 \cf2 Make Sure To Finish Phases I - IV Before Attempting!\
\pard\pardeftab720\li840\ri840\sl560\sa400\partightenfactor0

\fs48 \cf2 Phase V:\'a0
\f1\b0 \cb4 Piece#valid_moves
\f0\b \cb3 \
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f2\b0\fs40 \cf2 You will want a method on\'a0
\f1 \cb4 Piece
\f2 \cb3 \'a0that filters out the\'a0
\f1 \cb4 #moves
\f2 \cb3 \'a0of a\'a0
\f1 \cb4 Piece
\f2 \cb3 \'a0that would leave the player in check. A good approach is to write a\'a0
\f1 \cb4 Piece#move_into_check?(end_pos)
\f2 \cb3 \'a0method that will:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl440\sa100\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	0.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Duplicate the\'a0
\f1 \cb4 Board
\f2 \cb3 \'a0and perform the move\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Look to see if the player is in check after the move (
\f1 \cb4 Board#in_check?
\f2 \cb3 )\cb1 \
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0
\cf2 \cb3 To do this, you'll have to write a\'a0
\f1 \cb4 Board#dup
\f2 \cb3 \'a0method. Your\'a0
\f1 \cb4 #dup
\f2 \cb3 \'a0method should duplicate not only the\'a0
\f1 \cb4 Board
\f2 \cb3 , but the pieces on the\'a0
\f1 \cb4 Board
\f2 \cb3 .\'a0
\b Be aware
\b0 : Ruby's\'a0
\f1 \cb4 #dup
\f2 \cb3 \'a0method does not call\'a0
\f1 \cb4 dup
\f2 \cb3 \'a0on the instance variables, so you may need to write your own\'a0
\f1 \cb4 Board#dup
\f2 \cb3 \'a0method that will\'a0
\f1 \cb4 dup
\f2 \cb3 \'a0the individual pieces as well.\
\pard\pardeftab720\li840\ri840\sl480\sa400\partightenfactor0

\f0\b \cf2 A note on deep duping your board\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f2\b0 \cf2 As we saw when we recreated\'a0
\f1 \cb4 #dup
\f2 \cb3 \'a0using recursion, Ruby's native\'a0
\f1 \cb4 #dup
\f2 \cb3 \'a0method does not make a\'a0
\b deep copy
\b0 . This means that nested arrays\'a0
\b and any arrays stored in instance variables
\b0 \'a0will not be copied by the normal\'a0
\f1 \cb4 dup
\f2 \cb3 \'a0method:\
\pard\pardeftab720\sl480\partightenfactor0

\f3\fs32 \cf5 \cb6 \strokec5 # Example: if piece position is stored as an array
\f4 \cf7 \strokec7 \
queen 
\f3 =
\f4  
\f3 \cf8 \strokec8 Queen\cf7 \strokec7 .\cf9 \strokec9 new\cf7 \strokec7 ([\cf8 \strokec8 0\cf7 \strokec7 ,
\f4  
\f3 \cf8 \strokec8 1\cf7 \strokec7 ])
\f4 \
queen_copy 
\f3 =
\f4  queen
\f3 .
\f4 dup\
\

\f3 \cf5 \strokec5 # shouldn't modify original queen
\f4 \cf7 \strokec7 \
queen_copy
\f3 .
\f4 position
\f3 [\cf8 \strokec8 0\cf7 \strokec7 ]
\f4  
\f3 =
\f4  
\f3 \cf10 \strokec10 "CHANGED"
\f4 \cf7 \strokec7 \

\f3 \cf5 \strokec5 # but it does
\f4 \cf7 \strokec7 \
queen
\f3 .
\f4 position 
\f3 \cf5 \strokec5 # => ["CHANGED", 1]
\f4 \cf7 \strokec7 \
\pard\pardeftab720\li840\ri840\sl560\sa400\partightenfactor0

\f0\b\fs48 \cf2 \cb3 \strokec2 Caution on duping pieces\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f2\b0\fs40 \cf2 If your piece holds a reference to the original board, you will need to update this reference to the new duped board. Failure to do so will cause your duped board to generate incorrect moves!\
\pard\pardeftab720\li840\ri840\sl560\sa400\partightenfactor0

\f0\b\fs48 \cf2 An alternative to duping?\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f2\b0\fs40 \cf2 Another way to write\'a0
\f1 \cb4 #valid_moves
\f2 \cb3 \'a0would be to make the move on the original board, see if the player is in check, and then "undo" the move. However, this would require that\'a0
\f1 \cb4 Board
\f2 \cb3 \'a0have a method to undo moves.\
Once you write your\'a0
\f1 \cb4 Board#dup
\f2 \cb3 \'a0method, it'll be very straightforward to write\'a0
\f1 \cb4 Piece#valid_moves
\f2 \cb3 \'a0without complicated do/undo logic.\
It will likely help at this point to put some debug information into your\'a0
\f1 \cb4 Display
\f2 \cb3 \'a0class. Set a boolean variable on initialize of your\'a0
\f1 \cb4 Display
\f2 \cb3 \'a0for whether or not to show your debug info (you want to be able to easily turn this off). If that flag is set to true, then output some debug info, such as the selected piece's available moves, whether your opponent is in check, and so on.\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\b \cf2 Test each piece's\'a0
\f1\b0 \cb4 #valid moves
\f2\b \cb3 !
\b0 \'a0In pry\'a0
\f1 \cb4 load 'board.rb'
\f2 \cb3 \'a0and create a\'a0
\f1 \cb4 Board
\f2 \cb3 \'a0instance. Grab an instance of each type of piece (ie. from its position on the board) and check that calling\'a0
\f1 \cb4 #valid_moves
\f2 \cb3 \'a0returns what we expect. When you are satisfied it works\'a0
\b call a TA over for a code review!
\b0 \
\pard\pardeftab720\li840\ri840\sl560\sa400\partightenfactor0

\f0\b\fs48 \cf2 Further\'a0
\f1\b0 \cb4 Board
\f0\b \cb3 \'a0improvements\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f2\b0\fs40 \cf2 Modify your\'a0
\f1 \cb4 Board#move_piece
\f2 \cb3 \'a0method so that it only allows you to make valid moves. Because\'a0
\f1 \cb4 Board#move_piece
\f2 \cb3 \'a0needs to call\'a0
\f1 \cb4 Piece#valid_moves
\f2 \cb3 ,\'a0
\f1 \cb4 #valid_moves
\f2 \cb3 \'a0must not call\'a0
\f1 \cb4 Board#move_piece
\f2 \cb3 . But\'a0
\f1 \cb4 #valid_moves
\f2 \cb3 \'a0needs to make a move on the duped board to see if a player is left in check. For this reason, write a method\'a0
\f1 \cb4 Board#move_piece!(start_pos, end_pos)
\f2 \cb3 \'a0which makes a move without checking if it is valid.\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f1 \cf2 \cb4 Board#move_piece
\f2 \cb3 \'a0should raise an exception if it would leave you in check.\
\pard\pardeftab720\li840\ri840\sl720\sa400\partightenfactor0

\f0\b\fs60 \cf2 Phase VI:\'a0
\f1\b0 \cb4 Game
\f0\b \cb3 \
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f2\b0\fs40 \cf2 Only when done with the basic Chess logic (moving, check, checkmate) should you begin writing user interaction code.\
Write a\'a0
\f1 \cb4 Game
\f2 \cb3 \'a0class that constructs a\'a0
\f1 \cb4 Board
\f2 \cb3 \'a0object, then alternates between players (assume two human players for now) prompting them to move. The\'a0
\f1 \cb4 Game
\f2 \cb3 \'a0should handle exceptions from\'a0
\f1 \cb4 Board#move_piece
\f2 \cb3 \'a0and report them.\
You should write a\'a0
\f1 \cb4 HumanPlayer
\f2 \cb3 \'a0class with one method (
\f1 \cb4 #make_move
\f2 \cb3 ). This method should call\'a0
\f1 \cb4 Cursor#get_input
\f2 \cb3 \'a0and appropriately handle the different responses (a cursor position or nil). In that case,\'a0
\f1 \cb4 Game#play
\f2 \cb3 \'a0method just continuously calls\'a0
\f1 \cb4 #make_move
\f2 \cb3 .\
It is not a requirement to write a\'a0
\f1 \cb4 ComputerPlayer
\f2 \cb3 , but you may do this as a bonus. If you write your\'a0
\f1 \cb4 Game
\f2 \cb3 \'a0class cleanly, it should be relatively straightforward to add new player types at a later date.\
\pard\pardeftab720\li840\ri840\sl720\sa400\partightenfactor0

\f0\b\fs60 \cf2 Phase VI: Bonus Round!\
\pard\pardeftab720\li840\ri840\sl600\sa400\partightenfactor0

\f2\b0\fs40 \cf2 After completing each phase of the project, please remember to go back and make your code truly stellar, practicing all you know about coding style, encapsulation, and exception handling.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl440\sa100\partightenfactor0
\ls2\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 DRY out your code\cb1 \
\ls2\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Use exception handling, and make sure to deal with bad user input\cb1 \
\ls2\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Method decomposition (pull chunks of code into helper methods)\cb1 \
\ls2\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Make helper methods private\cb1 \
\ls2\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Jazz up your User Interface (UI) with\'a0{\field{\*\fldinst{HYPERLINK "http://en.wikipedia.org/wiki/Chess_symbols_in_Unicode"}}{\fldrslt \cf11 \strokec11 unicode}}.\cb1 \
\ls2\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Make a chess AI! Start with totally random moves. Next, capture pieces when possible. When you have this functionality working start giving your pieces some strategy! You can do it!}